{
  "address": "0xd324e6BF16BF466ec2537Ae232831f969fd1102F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LENDING_MARKET",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_ORACLE_AGGREGATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_POOL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKING",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAPPER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TREASURY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getKeepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLendingMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceOracleAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStablePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lendingMarket",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceOracleAggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stablePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "isKeeper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lendingMarket",
          "type": "address"
        }
      ],
      "name": "setLendingMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceOracleAggregator",
          "type": "address"
        }
      ],
      "name": "setPriceOracleAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stablePool",
          "type": "address"
        }
      ],
      "name": "setStablePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staking",
          "type": "address"
        }
      ],
      "name": "setStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        }
      ],
      "name": "setSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc70a40c6a951d03792e375332b784621715e58dde4006ece93a5e73df3fc8707",
  "receipt": {
    "to": null,
    "from": "0x9De5B00012A27b3efd50d5B90bF2e07413cED178",
    "contractAddress": "0xd324e6BF16BF466ec2537Ae232831f969fd1102F",
    "transactionIndex": 23,
    "gasUsed": "842302",
    "logsBloom": "0x
    "blockHash": "0x7673d40edbce01c1f1c19131ee63147191c80b43bbad644d06b847881a956431",
    "transactionHash": "0xc70a40c6a951d03792e375332b784621715e58dde4006ece93a5e73df3fc8707",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 10925495,
        "transactionHash": "0xc70a40c6a951d03792e375332b784621715e58dde4006ece93a5e73df3fc8707",
        "address": "0xd324e6BF16BF466ec2537Ae232831f969fd1102F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009de5b00012a27b3efd50d5b90bf2e07413ced178"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x7673d40edbce01c1f1c19131ee63147191c80b43bbad644d06b847881a956431"
      }
    ],
    "blockNumber": 10925495,
    "cumulativeGasUsed": "10018000",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0682d1d5097352fc56a4f18f50d6ab1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LENDING_MARKET\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_ORACLE_AGGREGATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAPPER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracleAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStablePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracleAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stablePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingMarket\",\"type\":\"address\"}],\"name\":\"setLendingMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceOracleAggregator\",\"type\":\"address\"}],\"name\":\"setPriceOracleAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablePool\",\"type\":\"address\"}],\"name\":\"setStablePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"LENDING_MARKET()\":{\"notice\":\"lending contract\"},\"PRICE_ORACLE_AGGREGATOR()\":{\"notice\":\"token price oracle aggregator\"},\"STABLE_POOL()\":{\"notice\":\"stability pool\"},\"STAKING()\":{\"notice\":\"staking address (40% of liquidation penalty + 80% of interest + borrow fee)\"},\"SWAPPER()\":{\"notice\":\"swapper contract\"},\"TREASURY()\":{\"notice\":\"treasury address (10% of liquidation penalty + 20% of interest + borrow fee)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingAddressRegistry.sol\":\"LendingAddressRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/LendingAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./interfaces/ILendingAddressRegistry.sol\\\";\\n\\ncontract LendingAddressRegistry is Ownable, ILendingAddressRegistry {\\n    using Counters for Counters.Counter;\\n\\n    /// @notice lending contract\\n    bytes32 public constant LENDING_MARKET = \\\"LENDING_MARKET\\\";\\n    /// @notice token price oracle aggregator\\n    bytes32 public constant PRICE_ORACLE_AGGREGATOR = \\\"PRICE_ORACLE_AGGREGATOR\\\";\\n    /// @notice treasury address (10% of liquidation penalty + 20% of interest + borrow fee)\\n    bytes32 public constant TREASURY = \\\"TREASURY\\\";\\n    /// @notice staking address (40% of liquidation penalty + 80% of interest + borrow fee)\\n    bytes32 public constant STAKING = \\\"STAKING\\\";\\n    /// @notice stability pool\\n    bytes32 public constant STABLE_POOL = \\\"STABLE_POOL\\\";\\n    /// @notice swapper contract\\n    bytes32 public constant SWAPPER = \\\"SWAPPER\\\";\\n\\n    mapping(bytes32 => address) private _addresses;\\n\\n    Counters.Counter private _keeperIndexTracker;\\n    mapping(uint256 => address) private _keepers;\\n    mapping(address => bool) private _isKeeper;\\n\\n    constructor() Ownable() {}\\n\\n    // Set up all addresses for the registry.\\n    function initialize(\\n        address lendingMarket,\\n        address priceOracleAggregator,\\n        address treasury,\\n        address staking,\\n        address stablePool,\\n        address swapper\\n    ) external override onlyOwner {\\n        _addresses[LENDING_MARKET] = lendingMarket;\\n        _addresses[PRICE_ORACLE_AGGREGATOR] = priceOracleAggregator;\\n        _addresses[TREASURY] = treasury;\\n        _addresses[STAKING] = staking;\\n        _addresses[STABLE_POOL] = stablePool;\\n        _addresses[SWAPPER] = swapper;\\n    }\\n\\n    function getLendingMarket() external view override returns (address) {\\n        return _addresses[LENDING_MARKET];\\n    }\\n\\n    function setLendingMarket(address lendingMarket)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _addresses[LENDING_MARKET] = lendingMarket;\\n    }\\n\\n    function getPriceOracleAggregator() external view returns (address) {\\n        return _addresses[PRICE_ORACLE_AGGREGATOR];\\n    }\\n\\n    function setPriceOracleAggregator(address priceOracleAggregator) external {\\n        _addresses[PRICE_ORACLE_AGGREGATOR] = priceOracleAggregator;\\n    }\\n\\n    function getTreasury() external view override returns (address) {\\n        return _addresses[TREASURY];\\n    }\\n\\n    function setTreasury(address treasury) external override onlyOwner {\\n        _addresses[TREASURY] = treasury;\\n    }\\n\\n    function getStaking() external view override returns (address) {\\n        return _addresses[STAKING];\\n    }\\n\\n    function setStaking(address staking) external override onlyOwner {\\n        _addresses[STAKING] = staking;\\n    }\\n\\n    function getStablePool() external view override returns (address) {\\n        return _addresses[STABLE_POOL];\\n    }\\n\\n    function setStablePool(address stablePool) external override onlyOwner {\\n        _addresses[STABLE_POOL] = stablePool;\\n    }\\n\\n    function getSwapper() external view override returns (address) {\\n        return _addresses[SWAPPER];\\n    }\\n\\n    function setSwapper(address swapper) external override onlyOwner {\\n        _addresses[SWAPPER] = swapper;\\n    }\\n\\n    function getKeepers() external view override returns (address[] memory) {\\n        uint256 length = _keeperIndexTracker.current();\\n        address[] memory keepers = new address[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            keepers[i] = _keepers[i];\\n        }\\n\\n        return keepers;\\n    }\\n\\n    function addKeeper(address keeper) external override onlyOwner {\\n        _keepers[_keeperIndexTracker.current()] = keeper;\\n        _keeperIndexTracker.increment();\\n        _isKeeper[keeper] = true;\\n    }\\n\\n    function isKeeper(address keeper) external view override returns (bool) {\\n        return _isKeeper[keeper];\\n    }\\n\\n    function getAddress(bytes32 id) external view override returns (address) {\\n        return _addresses[id];\\n    }\\n}\\n\",\"keccak256\":\"0x80f18ebf97eff244ee497fe4eec25868e2193581fa85090277f2d53efac6a701\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILendingAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface ILendingAddressRegistry {\\n    function initialize(\\n        address lendingMarket,\\n        address priceOracleAggregator,\\n        address treasury,\\n        address staking,\\n        address stablePool,\\n        address swapper\\n    ) external;\\n\\n    function getLendingMarket() external view returns (address);\\n\\n    function setLendingMarket(address lendingMarket) external;\\n\\n    function getPriceOracleAggregator() external view returns (address);\\n\\n    function setPriceOracleAggregator(address priceOracleAggregator) external;\\n\\n    function getTreasury() external view returns (address);\\n\\n    function setTreasury(address treasury) external;\\n\\n    function getStaking() external view returns (address);\\n\\n    function setStaking(address staking) external;\\n\\n    function getStablePool() external view returns (address);\\n\\n    function setStablePool(address stablePool) external;\\n\\n    function getSwapper() external view returns (address);\\n\\n    function setSwapper(address swapper) external;\\n\\n    function getKeepers() external view returns (address[] memory);\\n\\n    function addKeeper(address keeper) external;\\n\\n    function isKeeper(address keeper) external view returns (bool);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3f80ab7dfa68c4a3d71b408bcb0d314db3e7b11f23138caa94e4c0cc186c0f48\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610dd08061007e6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063715018a6116100de5780638ff3909911610097578063b105e39f11610071578063b105e39f1461053b578063cc2a9a5b14610550578063f0f4426014610563578063f2fde38b1461057657600080fd5b80638ff390991461050457806397610f30146105175780639c82f2a41461052857600080fd5b8063715018a61461042d57806372655b7a146104355780637b1391a61461047c57806381dc0fb2146104bf5780638da5cb5b146104e05780638e0cacfd146104f157600080fd5b80633b19e84a1161014b5780634c3d1cb9116101255780634c3d1cb9146103b85780635d6274f0146103cd5780636ba42aaa146103e0578063700d85ae1461041c57600080fd5b80633b19e84a1461031e5780634032b72b1461036257806343ad12af1461037557600080fd5b806304d21cee1461019357806321f8a721146101f65780632819e9d21461021f5780632d2c5565146102455780632d729142146102575780632ea451be146102cb575b600080fd5b6d13115391125391d7d3505492d15560921b60005260016020527f6225b52f6ebd2660bd06622d9c1f676d25b34e3bca604149842923172af6992b546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6101d9610204366004610bf8565b6000908152600160205260409020546001600160a01b031690565b6102376d13115391125391d7d3505492d15560921b81565b6040519081526020016101ed565b61023767545245415355525960c01b81565b6102c9610265366004610c2d565b76282924a1a2afa7a920a1a622afa0a3a3a922a3a0aa27a960491b60005260016020527f6d3c6f9d96039e64a22b4a2dbc99d90635a75e47c460565485d2021e2881269680546001600160a01b0319166001600160a01b0392909216919091179055565b005b76282924a1a2afa7a920a1a622afa0a3a3a922a3a0aa27a960491b60005260016020527f6d3c6f9d96039e64a22b4a2dbc99d90635a75e47c460565485d2021e28812696546001600160a01b03166101d9565b67545245415355525960c01b60005260016020527fabec3bf42c10118f0201dbc23af48d51db076feb8c9f2ecf0d129261aecb0e41546001600160a01b03166101d9565b6102c9610370366004610c2d565b610589565b6629aba0a82822a960c91b60005260016020527f8c9ab979f6b86ad91e8d55f172facc3f35f6a9f6501b4d6f61d4f97b4106946f546001600160a01b03166101d9565b6102376a14d51050931157d413d3d360aa1b81565b6102c96103db366004610c2d565b61062e565b61040c6103ee366004610c2d565b6001600160a01b031660009081526004602052604090205460ff1690565b60405190151581526020016101ed565b6102376629aba0a82822a960c91b81565b6102c96106b3565b6a14d51050931157d413d3d360aa1b60005260016020527f2fe08c067b3427710850a290a3f2cb6846629ad693e99b1400f0d7c6c344aef1546001600160a01b03166101d9565b665354414b494e4760c81b60005260016020527f89f7728deefe18a39faf39aba55cdedda039a8a2d07d4aa8b50887bc7d3313ec546001600160a01b03166101d9565b61023776282924a1a2afa7a920a1a622afa0a3a3a922a3a0aa27a960491b81565b6000546001600160a01b03166101d9565b6102c96104ff366004610c2d565b6106e9565b6102c9610512366004610c2d565b61076b565b610237665354414b494e4760c81b81565b6102c9610536366004610c2d565b6107e9565b610543610867565b6040516101ed9190610c4f565b6102c961055e366004610c9c565b610928565b6102c9610571366004610c2d565b610a8e565b6102c9610584366004610c2d565b610b0d565b6000546001600160a01b031633146105bc5760405162461bcd60e51b81526004016105b390610d10565b60405180910390fd5b80600360006105ca60025490565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061060a600280546001019055565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000546001600160a01b031633146106585760405162461bcd60e51b81526004016105b390610d10565b6d13115391125391d7d3505492d15560921b60005260016020527f6225b52f6ebd2660bd06622d9c1f676d25b34e3bca604149842923172af6992b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146106dd5760405162461bcd60e51b81526004016105b390610d10565b6106e76000610ba8565b565b6000546001600160a01b031633146107135760405162461bcd60e51b81526004016105b390610d10565b6a14d51050931157d413d3d360aa1b60005260016020527f2fe08c067b3427710850a290a3f2cb6846629ad693e99b1400f0d7c6c344aef180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107955760405162461bcd60e51b81526004016105b390610d10565b665354414b494e4760c81b60005260016020527f89f7728deefe18a39faf39aba55cdedda039a8a2d07d4aa8b50887bc7d3313ec80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108135760405162461bcd60e51b81526004016105b390610d10565b6629aba0a82822a960c91b60005260016020527f8c9ab979f6b86ad91e8d55f172facc3f35f6a9f6501b4d6f61d4f97b4106946f80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600061087460025490565b905060008167ffffffffffffffff81111561089157610891610d45565b6040519080825280602002602001820160405280156108ba578160200160208202803683370190505b50905060005b828110156109215760008181526003602052604090205482516001600160a01b03909116908390839081106108f7576108f7610d5b565b6001600160a01b03909216602092830291909101909101528061091981610d71565b9150506108c0565b5092915050565b6000546001600160a01b031633146109525760405162461bcd60e51b81526004016105b390610d10565b60016020527f6225b52f6ebd2660bd06622d9c1f676d25b34e3bca604149842923172af6992b80546001600160a01b03199081166001600160a01b03988916179091557f6d3c6f9d96039e64a22b4a2dbc99d90635a75e47c460565485d2021e2881269680548216968816969096179095557fabec3bf42c10118f0201dbc23af48d51db076feb8c9f2ecf0d129261aecb0e4180548616948716949094179093557f89f7728deefe18a39faf39aba55cdedda039a8a2d07d4aa8b50887bc7d3313ec80548516928616929092179091557f2fe08c067b3427710850a290a3f2cb6846629ad693e99b1400f0d7c6c344aef1805484169185169190911790556629aba0a82822a960c91b6000527f8c9ab979f6b86ad91e8d55f172facc3f35f6a9f6501b4d6f61d4f97b4106946f80549092169216919091179055565b6000546001600160a01b03163314610ab85760405162461bcd60e51b81526004016105b390610d10565b67545245415355525960c01b60005260016020527fabec3bf42c10118f0201dbc23af48d51db076feb8c9f2ecf0d129261aecb0e4180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b375760405162461bcd60e51b81526004016105b390610d10565b6001600160a01b038116610b9c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105b3565b610ba581610ba8565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610c0a57600080fd5b5035919050565b80356001600160a01b0381168114610c2857600080fd5b919050565b600060208284031215610c3f57600080fd5b610c4882610c11565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610c905783516001600160a01b031683529284019291840191600101610c6b565b50909695505050505050565b60008060008060008060c08789031215610cb557600080fd5b610cbe87610c11565b9550610ccc60208801610c11565b9450610cda60408801610c11565b9350610ce860608801610c11565b9250610cf660808801610c11565b9150610d0460a08801610c11565b90509295509295509295565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415610d9357634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220ce8988f3c00a7ca57b3dc7ed0361b2c328153e54ad22e10270883229a2c0557464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063715018a6116100de5780638ff3909911610097578063b105e39f11610071578063b105e39f1461053b578063cc2a9a5b14610550578063f0f4426014610563578063f2fde38b1461057657600080fd5b80638ff390991461050457806397610f30146105175780639c82f2a41461052857600080fd5b8063715018a61461042d57806372655b7a146104355780637b1391a61461047c57806381dc0fb2146104bf5780638da5cb5b146104e05780638e0cacfd146104f157600080fd5b80633b19e84a1161014b5780634c3d1cb9116101255780634c3d1cb9146103b85780635d6274f0146103cd5780636ba42aaa146103e0578063700d85ae1461041c57600080fd5b80633b19e84a1461031e5780634032b72b1461036257806343ad12af1461037557600080fd5b806304d21cee1461019357806321f8a721146101f65780632819e9d21461021f5780632d2c5565146102455780632d729142146102575780632ea451be146102cb575b600080fd5b6d13115391125391d7d3505492d15560921b60005260016020527f6225b52f6ebd2660bd06622d9c1f676d25b34e3bca604149842923172af6992b546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6101d9610204366004610bf8565b6000908152600160205260409020546001600160a01b031690565b6102376d13115391125391d7d3505492d15560921b81565b6040519081526020016101ed565b61023767545245415355525960c01b81565b6102c9610265366004610c2d565b76282924a1a2afa7a920a1a622afa0a3a3a922a3a0aa27a960491b60005260016020527f6d3c6f9d96039e64a22b4a2dbc99d90635a75e47c460565485d2021e2881269680546001600160a01b0319166001600160a01b0392909216919091179055565b005b76282924a1a2afa7a920a1a622afa0a3a3a922a3a0aa27a960491b60005260016020527f6d3c6f9d96039e64a22b4a2dbc99d90635a75e47c460565485d2021e28812696546001600160a01b03166101d9565b67545245415355525960c01b60005260016020527fabec3bf42c10118f0201dbc23af48d51db076feb8c9f2ecf0d129261aecb0e41546001600160a01b03166101d9565b6102c9610370366004610c2d565b610589565b6629aba0a82822a960c91b60005260016020527f8c9ab979f6b86ad91e8d55f172facc3f35f6a9f6501b4d6f61d4f97b4106946f546001600160a01b03166101d9565b6102376a14d51050931157d413d3d360aa1b81565b6102c96103db366004610c2d565b61062e565b61040c6103ee366004610c2d565b6001600160a01b031660009081526004602052604090205460ff1690565b60405190151581526020016101ed565b6102376629aba0a82822a960c91b81565b6102c96106b3565b6a14d51050931157d413d3d360aa1b60005260016020527f2fe08c067b3427710850a290a3f2cb6846629ad693e99b1400f0d7c6c344aef1546001600160a01b03166101d9565b665354414b494e4760c81b60005260016020527f89f7728deefe18a39faf39aba55cdedda039a8a2d07d4aa8b50887bc7d3313ec546001600160a01b03166101d9565b61023776282924a1a2afa7a920a1a622afa0a3a3a922a3a0aa27a960491b81565b6000546001600160a01b03166101d9565b6102c96104ff366004610c2d565b6106e9565b6102c9610512366004610c2d565b61076b565b610237665354414b494e4760c81b81565b6102c9610536366004610c2d565b6107e9565b610543610867565b6040516101ed9190610c4f565b6102c961055e366004610c9c565b610928565b6102c9610571366004610c2d565b610a8e565b6102c9610584366004610c2d565b610b0d565b6000546001600160a01b031633146105bc5760405162461bcd60e51b81526004016105b390610d10565b60405180910390fd5b80600360006105ca60025490565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061060a600280546001019055565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000546001600160a01b031633146106585760405162461bcd60e51b81526004016105b390610d10565b6d13115391125391d7d3505492d15560921b60005260016020527f6225b52f6ebd2660bd06622d9c1f676d25b34e3bca604149842923172af6992b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146106dd5760405162461bcd60e51b81526004016105b390610d10565b6106e76000610ba8565b565b6000546001600160a01b031633146107135760405162461bcd60e51b81526004016105b390610d10565b6a14d51050931157d413d3d360aa1b60005260016020527f2fe08c067b3427710850a290a3f2cb6846629ad693e99b1400f0d7c6c344aef180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107955760405162461bcd60e51b81526004016105b390610d10565b665354414b494e4760c81b60005260016020527f89f7728deefe18a39faf39aba55cdedda039a8a2d07d4aa8b50887bc7d3313ec80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108135760405162461bcd60e51b81526004016105b390610d10565b6629aba0a82822a960c91b60005260016020527f8c9ab979f6b86ad91e8d55f172facc3f35f6a9f6501b4d6f61d4f97b4106946f80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600061087460025490565b905060008167ffffffffffffffff81111561089157610891610d45565b6040519080825280602002602001820160405280156108ba578160200160208202803683370190505b50905060005b828110156109215760008181526003602052604090205482516001600160a01b03909116908390839081106108f7576108f7610d5b565b6001600160a01b03909216602092830291909101909101528061091981610d71565b9150506108c0565b5092915050565b6000546001600160a01b031633146109525760405162461bcd60e51b81526004016105b390610d10565b60016020527f6225b52f6ebd2660bd06622d9c1f676d25b34e3bca604149842923172af6992b80546001600160a01b03199081166001600160a01b03988916179091557f6d3c6f9d96039e64a22b4a2dbc99d90635a75e47c460565485d2021e2881269680548216968816969096179095557fabec3bf42c10118f0201dbc23af48d51db076feb8c9f2ecf0d129261aecb0e4180548616948716949094179093557f89f7728deefe18a39faf39aba55cdedda039a8a2d07d4aa8b50887bc7d3313ec80548516928616929092179091557f2fe08c067b3427710850a290a3f2cb6846629ad693e99b1400f0d7c6c344aef1805484169185169190911790556629aba0a82822a960c91b6000527f8c9ab979f6b86ad91e8d55f172facc3f35f6a9f6501b4d6f61d4f97b4106946f80549092169216919091179055565b6000546001600160a01b03163314610ab85760405162461bcd60e51b81526004016105b390610d10565b67545245415355525960c01b60005260016020527fabec3bf42c10118f0201dbc23af48d51db076feb8c9f2ecf0d129261aecb0e4180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b375760405162461bcd60e51b81526004016105b390610d10565b6001600160a01b038116610b9c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105b3565b610ba581610ba8565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610c0a57600080fd5b5035919050565b80356001600160a01b0381168114610c2857600080fd5b919050565b600060208284031215610c3f57600080fd5b610c4882610c11565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610c905783516001600160a01b031683529284019291840191600101610c6b565b50909695505050505050565b60008060008060008060c08789031215610cb557600080fd5b610cbe87610c11565b9550610ccc60208801610c11565b9450610cda60408801610c11565b9350610ce860608801610c11565b9250610cf660808801610c11565b9150610d0460a08801610c11565b90509295509295509295565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415610d9357634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220ce8988f3c00a7ca57b3dc7ed0361b2c328153e54ad22e10270883229a2c0557464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "LENDING_MARKET()": {
        "notice": "lending contract"
      },
      "PRICE_ORACLE_AGGREGATOR()": {
        "notice": "token price oracle aggregator"
      },
      "STABLE_POOL()": {
        "notice": "stability pool"
      },
      "STAKING()": {
        "notice": "staking address (40% of liquidation penalty + 80% of interest + borrow fee)"
      },
      "SWAPPER()": {
        "notice": "swapper contract"
      },
      "TREASURY()": {
        "notice": "treasury address (10% of liquidation penalty + 20% of interest + borrow fee)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1471,
        "contract": "contracts/LendingAddressRegistry.sol:LendingAddressRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4762,
        "contract": "contracts/LendingAddressRegistry.sol:LendingAddressRegistry",
        "label": "_addresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4765,
        "contract": "contracts/LendingAddressRegistry.sol:LendingAddressRegistry",
        "label": "_keeperIndexTracker",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)3657_storage"
      },
      {
        "astId": 4769,
        "contract": "contracts/LendingAddressRegistry.sol:LendingAddressRegistry",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4773,
        "contract": "contracts/LendingAddressRegistry.sol:LendingAddressRegistry",
        "label": "_isKeeper",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Counter)3657_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3656,
            "contract": "contracts/LendingAddressRegistry.sol:LendingAddressRegistry",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
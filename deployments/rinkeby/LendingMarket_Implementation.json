{
  "address": "0x5290a758a5F102C0c81A1454f6AA0Afa681D1ebA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "airUSDAmount",
          "type": "uint256"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "airUSDAmount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accrue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "numerator",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "denominator",
              "type": "uint128"
            }
          ],
          "internalType": "struct LendingMarket.Rate",
          "name": "_creditLimitRate",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "numerator",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "denominator",
              "type": "uint128"
            }
          ],
          "internalType": "struct LendingMarket.Rate",
          "name": "_liqLimitRate",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_totalBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "addCollateralToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract ILendingAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airUSD",
      "outputs": [
        {
          "internalType": "contract IAirUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allCollateralTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "amountFromShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_airUSDAmount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralSettings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "numerator",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "denominator",
              "type": "uint128"
            }
          ],
          "internalType": "struct LendingMarket.Rate",
          "name": "creditLimitRate",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "numerator",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "denominator",
              "type": "uint128"
            }
          ],
          "internalType": "struct LendingMarket.Rate",
          "name": "liqLimitRate",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "collateralTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralTotalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectOrgFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_onBehalfOf",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getUserAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "contract IAirUSD",
          "name": "_airUSD",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "numerator",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "denominator",
                  "type": "uint128"
                }
              ],
              "internalType": "struct LendingMarket.Rate",
              "name": "interestApr",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "numerator",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "denominator",
                  "type": "uint128"
                }
              ],
              "internalType": "struct LendingMarket.Rate",
              "name": "orgFeeRate",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "numerator",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "denominator",
                  "type": "uint128"
                }
              ],
              "internalType": "struct LendingMarket.Rate",
              "name": "liquidationPenalty",
              "type": "tuple"
            }
          ],
          "internalType": "struct LendingMarket.MarketSettings",
          "name": "_settings",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "positionView",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creditLimitUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtPrincipal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtInterest",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "liquidatable",
              "type": "bool"
            }
          ],
          "internalType": "struct ILendingMarket.PositionView",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeCollateralToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_airUSDAmount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "setAddressProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "numerator",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "denominator",
              "type": "uint128"
            }
          ],
          "internalType": "struct LendingMarket.Rate",
          "name": "interestApr",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "numerator",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "denominator",
              "type": "uint128"
            }
          ],
          "internalType": "struct LendingMarket.Rate",
          "name": "orgFeeRate",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "numerator",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "denominator",
              "type": "uint128"
            }
          ],
          "internalType": "struct LendingMarket.Rate",
          "name": "liquidationPenalty",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sharesFromAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalBorrowsPerCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebtAccruedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebtAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebtPortion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeeCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ba2e021ac2695e662c0fea83d18a1eecc3df72cb251a751f430f88b811a190c",
  "receipt": {
    "to": null,
    "from": "0x9De5B00012A27b3efd50d5B90bF2e07413cED178",
    "contractAddress": "0x5290a758a5F102C0c81A1454f6AA0Afa681D1ebA",
    "transactionIndex": 14,
    "gasUsed": "2951715",
    "logsBloom": "0x
    "blockHash": "0xe45a6a59b417a463eb3db07b8824860555f12b8e9ba0a8234474077e30540a5e",
    "transactionHash": "0x2ba2e021ac2695e662c0fea83d18a1eecc3df72cb251a751f430f88b811a190c",
    "logs": [],
    "blockNumber": 10925511,
    "cumulativeGasUsed": "4902249",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "77ef8c890880c91894925b5c77442c96",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"airUSDAmount\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"airUSDAmount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct LendingMarket.Rate\",\"name\":\"_creditLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct LendingMarket.Rate\",\"name\":\"_liqLimitRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_totalBorrowCap\",\"type\":\"uint256\"}],\"name\":\"addCollateralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract ILendingAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airUSD\",\"outputs\":[{\"internalType\":\"contract IAirUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allCollateralTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"amountFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_airUSDAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct LendingMarket.Rate\",\"name\":\"creditLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct LendingMarket.Rate\",\"name\":\"liqLimitRate\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"collateralTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectOrgFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_onBehalfOf\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"contract IAirUSD\",\"name\":\"_airUSD\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct LendingMarket.Rate\",\"name\":\"interestApr\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct LendingMarket.Rate\",\"name\":\"orgFeeRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct LendingMarket.Rate\",\"name\":\"liquidationPenalty\",\"type\":\"tuple\"}],\"internalType\":\"struct LendingMarket.MarketSettings\",\"name\":\"_settings\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"positionView\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creditLimitUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtInterest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"liquidatable\",\"type\":\"bool\"}],\"internalType\":\"struct ILendingMarket.PositionView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeCollateralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_airUSDAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setAddressProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct LendingMarket.Rate\",\"name\":\"interestApr\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct LendingMarket.Rate\",\"name\":\"orgFeeRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct LendingMarket.Rate\",\"name\":\"liquidationPenalty\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sharesFromAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBorrowsPerCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtAccruedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtPortion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"If the user's health factor is below 1, anyone can liquidate his/her position. Protocol will charge debt interest from borrowers and protocol revenue from liquidation.\",\"kind\":\"dev\",\"methods\":{\"accrue()\":{\"details\":\"Updates the contract's state by calculating the additional interest accrued since the last time\"},\"addCollateralToken(address,(uint128,uint128),(uint128,uint128),uint256)\":{\"details\":\"only owner can call this function\",\"params\":{\"_creditLimitRate\":\"borrow limit\",\"_liqLimitRate\":\"liquidation threshold rate\",\"_token\":\"collateral token address\"}},\"allCollateralTokens()\":{\"returns\":{\"_0\":\"The collateral tokens in array format\"}},\"borrow(address,uint256)\":{\"details\":\"user can call this function after depositing his/her collateral\",\"params\":{\"_airUSDAmount\":\"AirUSD amount to borrow\",\"_token\":\"collateral token address\"}},\"collectOrgFee()\":{\"details\":\"only owner can call this function\"},\"deposit(address,uint256,address)\":{\"details\":\"user can call this function after approving his/her collateral amount\",\"params\":{\"_amount\":\"collateral amount to deposit\",\"_onBehalfOf\":\"deposit collateral for\",\"_token\":\"collateral token address\"}},\"initialize(address,address,((uint128,uint128),(uint128,uint128),(uint128,uint128)))\":{\"params\":{\"_airUSD\":\"AirUSD token address\",\"_provider\":\"address provider\",\"_settings\":\"lending market settings\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"positionView(address,address)\":{\"returns\":{\"_0\":\"position this includes a user's collateral, debt, liquidation data.\"}},\"removeCollateralToken(address)\":{\"details\":\"only owner can call this function\",\"params\":{\"_token\":\"collateral token address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(address,uint256)\":{\"details\":\"user can call this function after approving his/her AirUSD amount to repay\",\"params\":{\"_airUSDAmount\":\"AirUSD amount to repay\",\"_token\":\"collateral token address\"}},\"setAddressProvider(address)\":{\"params\":{\"_provider\":\"new address provider\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"details\":\"user can call this function after depositing his/her collateral\",\"params\":{\"_amount\":\"collateral amount to withdraw\",\"_token\":\"collateral token address\"}}},\"title\":\"LendingMarket\",\"version\":1},\"userdoc\":{\"events\":{\"Borrowed(address,uint256)\":{\"notice\":\"An event thats emitted when user borrows AirUSD\"},\"Deposit(address,address,uint256,uint256)\":{\"notice\":\"An event thats emitted when user deposits collateral\"},\"Liquidate(address,address,uint256,address)\":{\"notice\":\"An event thats emitted when liquidator liquidates a user's position\"},\"Repay(address,uint256)\":{\"notice\":\"An event thats emitted when user repays AirUSD\"},\"Withdraw(address,address,uint256,uint256)\":{\"notice\":\"An event thats emitted when user withdraws collateral\"}},\"kind\":\"user\",\"methods\":{\"accrue()\":{\"notice\":\"accrue debt interest\"},\"addCollateralToken(address,(uint128,uint128),(uint128,uint128),uint256)\":{\"notice\":\"add a new collateral token\"},\"addressProvider()\":{\"notice\":\"address provider\"},\"airUSD()\":{\"notice\":\"AirUSD token address\"},\"allCollateralTokens()\":{\"notice\":\"returns all collateral tokens in array format\"},\"borrow(address,uint256)\":{\"notice\":\"borrow AirUSD\"},\"collateralSettings(address)\":{\"notice\":\"collateral settings\"},\"collateralTokens(uint256)\":{\"notice\":\"collateral tokens in array\"},\"collectOrgFee()\":{\"notice\":\"collect protocol fees accrued so far\"},\"deposit(address,uint256,address)\":{\"notice\":\"deposit collateral\"},\"initialize(address,address,((uint128,uint128),(uint128,uint128),(uint128,uint128)))\":{\"notice\":\"Initializer.\"},\"positionView(address,address)\":{\"notice\":\"returns a user's collateral position\"},\"removeCollateralToken(address)\":{\"notice\":\"remove an existing collateral token\"},\"repay(address,uint256)\":{\"notice\":\"repay position with AirUSD\"},\"setAddressProvider(address)\":{\"notice\":\"set new address provider\"},\"settings()\":{\"notice\":\"lending market settings\"},\"totalBorrowsPerCollateral(address)\":{\"notice\":\"airUSD total borrows per collateral token\"},\"totalDebtAccruedAt()\":{\"notice\":\"last time of debt accrued\"},\"totalDebtAmount()\":{\"notice\":\"total borrowed amount accrued so far\"},\"totalDebtPortion()\":{\"notice\":\"total borrowed portion\"},\"totalFeeCollected()\":{\"notice\":\"total protocol fees accrued so far\"},\"withdraw(address,uint256)\":{\"notice\":\"withdraw collateral\"}},\"notice\":\"Lending pools where users can deposit/withdraw collateral and borrow AirUSD.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingMarket.sol\":\"LendingMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/LendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/ILendingAddressRegistry.sol\\\";\\nimport \\\"./interfaces/IPriceOracleAggregator.sol\\\";\\nimport \\\"./interfaces/ILendingMarket.sol\\\";\\nimport \\\"./interfaces/ISwapper.sol\\\";\\nimport \\\"./interfaces/IAirUSD.sol\\\";\\n\\n/**\\n * @title LendingMarket\\n * @notice Lending pools where users can deposit/withdraw collateral and borrow AirUSD.\\n * @dev If the user's health factor is below 1, anyone can liquidate his/her position.\\n * Protocol will charge debt interest from borrowers and protocol revenue from liquidation.\\n */\\ncontract LendingMarket is\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ILendingMarket\\n{\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n    using SafeERC20 for IAirUSD;\\n\\n    /// @notice A struct to represent the rate in numerator/denominator\\n    struct Rate {\\n        uint128 numerator;\\n        uint128 denominator;\\n    }\\n\\n    /// @notice A struct for lending market settings\\n    struct MarketSettings {\\n        Rate interestApr; // debt interest rate in APR\\n        Rate orgFeeRate; // fees that will be charged upon minting AirUSD (0.3% in AirUSD)\\n        Rate liquidationPenalty; // liquidation penalty fees (5%)\\n    }\\n\\n    /// @notice A struct for collateral settings\\n    struct CollateralSetting {\\n        bool isValid; // if collateral is valid or not\\n        Rate creditLimitRate; // collateral borrow limit (e.g. USDs = 80%, BTCs = 70%, AVAXs=70%)\\n        Rate liqLimitRate; // collateral liquidation threshold rate (greater than credit limit rate)\\n        uint8 decimals; // collateral token decimals\\n        uint256 totalBorrowCap;\\n    }\\n\\n    /// @notice A struct for users collateral position\\n    struct Position {\\n        uint256 shares; // collateral amount\\n        uint256 debtPrincipal; // debt amount\\n        uint256 debtPortion; // accumulated debt interest\\n    }\\n\\n    /// @notice An event thats emitted when user deposits collateral\\n    event Deposit(\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n    /// @notice An event thats emitted when user borrows AirUSD\\n    event Borrowed(address indexed user, uint256 airUSDAmount);\\n    /// @notice An event thats emitted when user withdraws collateral\\n    event Withdraw(\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n    /// @notice An event thats emitted when user repays AirUSD\\n    event Repay(address indexed user, uint256 airUSDAmount);\\n    /// @notice An event thats emitted when liquidator liquidates a user's position\\n    event Liquidate(\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount,\\n        address indexed liquidator\\n    );\\n\\n    /// @notice address provider\\n    ILendingAddressRegistry public addressProvider;\\n    /// @notice AirUSD token address\\n    IAirUSD public airUSD;\\n    /// @notice lending market settings\\n    MarketSettings public settings;\\n    /// @notice collateral tokens in array\\n    address[] public collateralTokens;\\n    /// @notice collateral settings\\n    mapping(address => CollateralSetting) public collateralSettings; // token => collateral setting\\n    mapping(address => uint256) public collateralTotalShares; // token => total shares\\n    /// @notice users collateral position\\n    mapping(address => mapping(address => Position)) internal userPositions; // user => collateral token => position\\n    /// @notice airUSD total borrows per collateral token\\n    mapping(address => uint256) public totalBorrowsPerCollateral;\\n    /// @notice users array per collateral token\\n    mapping(address => address[]) internal marketUsers; // collateral token => users array\\n    /// @notice market user flag\\n    mapping(address => mapping(address => bool)) internal isMarketUser; // user => collateral token => flag\\n\\n    /// @notice total borrowed amount accrued so far\\n    uint256 public totalDebtAmount;\\n    /// @notice last time of debt accrued\\n    uint256 public totalDebtAccruedAt;\\n    /// @notice total borrowed portion\\n    uint256 public totalDebtPortion;\\n    /// @notice total protocol fees accrued so far\\n    uint256 public totalFeeCollected;\\n\\n    /**\\n     * @notice Initializer.\\n     * @param _provider address provider\\n     * @param _airUSD AirUSD token address\\n     * @param _settings lending market settings\\n     */\\n    function initialize(\\n        address _provider,\\n        IAirUSD _airUSD,\\n        MarketSettings memory _settings\\n    ) external initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        // validates lending market settings\\n        _validateRate(_settings.interestApr); // should be updated to use cov ratio\\n        _validateRate(_settings.orgFeeRate); // 0.3%\\n        _validateRate(_settings.liquidationPenalty); // 5%\\n\\n        addressProvider = ILendingAddressRegistry(_provider);\\n        airUSD = _airUSD;\\n        settings = _settings;\\n    }\\n\\n    /**\\n     * @notice accrue debt interest\\n     * @dev Updates the contract's state by calculating the additional interest accrued since the last time\\n     */\\n    function accrue() public {\\n        // calculate additional interest from last time\\n        uint256 additionalInterest = _calculateInterestFromLastTime();\\n\\n        // set last time accrued\\n        totalDebtAccruedAt = block.timestamp;\\n\\n        // plus additional interest\\n        totalDebtAmount += additionalInterest;\\n        totalFeeCollected += additionalInterest;\\n    }\\n\\n    /**\\n     * @notice set new address provider\\n     * @param _provider new address provider\\n     */\\n    function setAddressProvider(address _provider) external onlyOwner {\\n        addressProvider = ILendingAddressRegistry(_provider);\\n    }\\n\\n    /**\\n     * @notice add a new collateral token\\n     * @dev only owner can call this function\\n     * @param _token collateral token address\\n     * @param _creditLimitRate borrow limit\\n     * @param _liqLimitRate liquidation threshold rate\\n     */\\n    function addCollateralToken(\\n        address _token,\\n        Rate memory _creditLimitRate,\\n        Rate memory _liqLimitRate,\\n        uint256 _totalBorrowCap\\n    ) external onlyOwner {\\n        // validates collateral settings\\n        _validateRate(_creditLimitRate);\\n        _validateRate(_liqLimitRate);\\n\\n        // check if collateral token already exists\\n        require(!collateralSettings[_token].isValid, \\\"collateral token exists\\\");\\n\\n        // add a new collateral\\n        collateralSettings[_token] = CollateralSetting({\\n            isValid: true,\\n            creditLimitRate: _creditLimitRate,\\n            liqLimitRate: _liqLimitRate,\\n            decimals: IERC20MetadataUpgradeable(_token).decimals(),\\n            totalBorrowCap: _totalBorrowCap\\n        });\\n        collateralTokens.push(_token);\\n    }\\n\\n    /**\\n     * @notice remove an existing collateral token\\n     * @dev only owner can call this function\\n     * @param _token collateral token address\\n     */\\n    function removeCollateralToken(address _token) external onlyOwner {\\n        // check if collateral token already exists\\n        require(collateralSettings[_token].isValid, \\\"invalid collateral token\\\");\\n\\n        // add a new collateral\\n        uint256 index = 0;\\n        uint256 length = collateralTokens.length;\\n        for (; index < length; index++) {\\n            if (collateralTokens[index] == _token) {\\n                break;\\n            }\\n        }\\n\\n        collateralTokens[index] = collateralTokens[length - 1];\\n        delete collateralTokens[length - 1];\\n        collateralTokens.pop();\\n    }\\n\\n    /**\\n     * @notice returns all collateral tokens in array format\\n     * @return The collateral tokens in array format\\n     */\\n    function allCollateralTokens() external view returns (address[] memory) {\\n        return collateralTokens;\\n    }\\n\\n    /**\\n     * @notice collect protocol fees accrued so far\\n     * @dev only owner can call this function\\n     */\\n    function collectOrgFee() external nonReentrant onlyOwner {\\n        accrue();\\n\\n        // collect protocol fees in AirUSD\\n        _transferFee(totalFeeCollected, true);\\n        totalFeeCollected = 0;\\n    }\\n\\n    /**\\n     * @notice deposit collateral\\n     * @dev user can call this function after approving his/her collateral amount\\n     * @param _token collateral token address\\n     * @param _amount collateral amount to deposit\\n     * @param _onBehalfOf deposit collateral for\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        address _onBehalfOf\\n    ) external nonReentrant {\\n        require(collateralSettings[_token].isValid, \\\"invalid token\\\");\\n\\n        uint256 shares = sharesFromAmount(_token, _amount);\\n\\n        // get collateral from depositor\\n        IERC20MetadataUpgradeable(_token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        // update a user's collateral position\\n        userPositions[_onBehalfOf][_token].shares += shares;\\n        collateralTotalShares[_token] += shares;\\n\\n        // check if new market user enters\\n        if (!isMarketUser[_onBehalfOf][_token]) {\\n            isMarketUser[_onBehalfOf][_token] = true;\\n            marketUsers[_token].push(_onBehalfOf);\\n        }\\n\\n        emit Deposit(_onBehalfOf, _token, _amount, shares);\\n    }\\n\\n    /**\\n     * @notice borrow AirUSD\\n     * @dev user can call this function after depositing his/her collateral\\n     * @param _token collateral token address\\n     * @param _airUSDAmount AirUSD amount to borrow\\n     */\\n    function borrow(address _token, uint256 _airUSDAmount)\\n        external\\n        nonReentrant\\n    {\\n        // check if collateral is valid\\n        require(collateralSettings[_token].isValid, \\\"invalid token\\\");\\n\\n        accrue();\\n\\n        // calculate borrow limit in USD\\n        uint256 creditLimit = _creditLimitUSD(msg.sender, _token);\\n        // calculate debt amount in USD\\n        uint256 debtAmount = _debtUSD(msg.sender, _token);\\n\\n        // check if additional borrow is available\\n        require(\\n            debtAmount + _airUSDAmount <= creditLimit,\\n            \\\"insufficient collateral\\\"\\n        );\\n\\n        require(\\n            totalBorrowsPerCollateral[_token] + _airUSDAmount <=\\n                collateralSettings[_token].totalBorrowCap,\\n            \\\"borrow cap reached\\\"\\n        );\\n\\n        // calculate AirUSD mint fee\\n        uint256 orgFee = (_airUSDAmount * settings.orgFeeRate.numerator) /\\n            settings.orgFeeRate.denominator;\\n        totalFeeCollected += orgFee;\\n\\n        // mint AirUSD to user\\n        airUSD.mint(msg.sender, _airUSDAmount - orgFee);\\n\\n        // update user's collateral position\\n        Position storage position = userPositions[msg.sender][_token];\\n        if (totalDebtPortion == 0) {\\n            totalDebtPortion = _airUSDAmount;\\n            position.debtPortion = _airUSDAmount;\\n        } else {\\n            uint256 plusPortion = (totalDebtPortion * _airUSDAmount) /\\n                totalDebtAmount;\\n            totalDebtPortion += plusPortion;\\n            position.debtPortion += plusPortion;\\n        }\\n        position.debtPrincipal += _airUSDAmount;\\n        totalDebtAmount += _airUSDAmount;\\n\\n        // increase total borrows of the collateral market\\n        totalBorrowsPerCollateral[_token] += _airUSDAmount;\\n\\n        emit Borrowed(msg.sender, _airUSDAmount);\\n    }\\n\\n    /**\\n     * @notice withdraw collateral\\n     * @dev user can call this function after depositing his/her collateral\\n     * @param _token collateral token address\\n     * @param _amount collateral amount to withdraw\\n     */\\n    function withdraw(address _token, uint256 _amount) external nonReentrant {\\n        // check if collateral is valid\\n        require(collateralSettings[_token].isValid, \\\"invalid token\\\");\\n\\n        accrue();\\n\\n        Position storage position = userPositions[msg.sender][_token];\\n\\n        uint256 shares = sharesFromAmount(_token, _amount);\\n        // need to consider dust here\\n        if (amountFromShares(_token, shares) < _amount) {\\n            shares += 1;\\n        }\\n\\n        // check if withdraw shares is more than the collateral shares\\n        require(position.shares >= shares, \\\"insufficient collateral\\\");\\n\\n        // calculate borrow limit after withdraw in USD\\n        uint256 creditLimitAfterWithdraw = (_tokenUSD(\\n            _token,\\n            amountFromShares(_token, position.shares - shares)\\n        ) * collateralSettings[_token].creditLimitRate.numerator) /\\n            collateralSettings[_token].creditLimitRate.denominator;\\n        // calculate debt amount in USD\\n        uint256 debtAmount = _debtUSD(msg.sender, _token);\\n\\n        // check if withdraw is available\\n        require(\\n            debtAmount <= creditLimitAfterWithdraw,\\n            \\\"insufficient collateral\\\"\\n        );\\n\\n        // update user's collateral position\\n        position.shares -= shares;\\n        collateralTotalShares[_token] -= shares;\\n\\n        // transfer collateral to user\\n        IERC20MetadataUpgradeable(_token).safeTransfer(msg.sender, _amount);\\n\\n        emit Withdraw(msg.sender, _token, _amount, shares);\\n    }\\n\\n    /**\\n     * @notice repay position with AirUSD\\n     * @dev user can call this function after approving his/her AirUSD amount to repay\\n     * @param _token collateral token address\\n     * @param _airUSDAmount AirUSD amount to repay\\n     */\\n    function repay(address _token, uint256 _airUSDAmount)\\n        external\\n        nonReentrant\\n    {\\n        // check if collateral is valid\\n        require(collateralSettings[_token].isValid, \\\"invalid token\\\");\\n\\n        accrue();\\n\\n        require(_airUSDAmount > 0, \\\"invalid amount\\\");\\n\\n        Position storage position = userPositions[msg.sender][_token];\\n\\n        // calculate debt amount in USD\\n        uint256 debtAmount = _debtUSD(msg.sender, _token);\\n        uint256 debtPrincipal = position.debtPrincipal;\\n        uint256 debtInterest = debtAmount - debtPrincipal;\\n\\n        // only pays for the debt and returns remainings\\n        _airUSDAmount = _airUSDAmount > debtAmount ? debtAmount : _airUSDAmount;\\n\\n        // burn repaid AirUSD\\n        airUSD.burnFrom(msg.sender, _airUSDAmount);\\n\\n        // update user's collateral position\\n        uint256 paidPrincipal = _airUSDAmount > debtInterest\\n            ? _airUSDAmount - debtInterest\\n            : 0;\\n        uint256 minusPortion = paidPrincipal == debtPrincipal\\n            ? position.debtPortion\\n            : (totalDebtPortion * _airUSDAmount) / totalDebtAmount;\\n\\n        totalDebtAmount -= _airUSDAmount;\\n        totalDebtPortion -= minusPortion;\\n        position.debtPrincipal -= paidPrincipal;\\n        position.debtPortion -= minusPortion;\\n\\n        // decrease total borrows of the collateral market (exclude only principls)\\n        totalBorrowsPerCollateral[_token] -= paidPrincipal;\\n\\n        emit Repay(msg.sender, _airUSDAmount);\\n    }\\n\\n    function liquidate(address _user, address _token)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        // check if msg.sender is chainlink keeper\\n        require(addressProvider.isKeeper(msg.sender), \\\"not keeper\\\");\\n        // check if collateral is valid\\n        require(collateralSettings[_token].isValid, \\\"invalid token\\\");\\n\\n        accrue();\\n\\n        Position storage position = userPositions[_user][_token];\\n        // calculate debt amount in USD\\n        uint256 debtAmount = _debtUSD(_user, _token);\\n\\n        // check if liquidation is available\\n        require(\\n            debtAmount >= _liquidateLimitUSD(_user, _token),\\n            \\\"not liquidatable\\\"\\n        );\\n\\n        // burn airUSD from keeper\\n        airUSD.burnFrom(msg.sender, debtAmount);\\n\\n        // get price from collateral token oracle contract\\n        uint256 price = IPriceOracleAggregator(\\n            addressProvider.getPriceOracleAggregator()\\n        ).viewPriceInUSD(_token);\\n        // returnUSD = debtAmount + liquidation penalty (105%)\\n        uint256 returnUSD = debtAmount +\\n            (debtAmount * settings.liquidationPenalty.numerator) /\\n            settings.liquidationPenalty.denominator;\\n        // collateral amount in returnUSD\\n        uint256 collateralAmountIn = (returnUSD *\\n            (10**collateralSettings[_token].decimals)) /\\n            price /\\n            10**10;\\n\\n        uint256 userCollateralAmount = amountFromShares(\\n            _token,\\n            position.shares\\n        );\\n        require(\\n            collateralAmountIn <= userCollateralAmount,\\n            \\\"not enough collateral\\\"\\n        );\\n\\n        // swap collateral token in airUSD\\n        address swapper = addressProvider.getSwapper();\\n        IERC20(_token).approve(swapper, collateralAmountIn);\\n        uint256 airUSDAmountOut = ISwapper(swapper).swap(\\n            _token,\\n            address(airUSD),\\n            collateralAmountIn,\\n            address(this)\\n        );\\n\\n        require(airUSDAmountOut > debtAmount, \\\"zero penalty\\\");\\n\\n        // liquidation penalty\\n        uint256 liquidationPenalty = airUSDAmountOut - debtAmount;\\n\\n        // debtAmount + 50% of penalty => keeper\\n        airUSD.transfer(msg.sender, debtAmount + liquidationPenalty / 2);\\n\\n        // 50% of penalty => fees\\n        _transferFee(liquidationPenalty / 2, false);\\n\\n        // return rest collateral token to user\\n        if (userCollateralAmount > collateralAmountIn) {\\n            IERC20MetadataUpgradeable(_token).safeTransfer(\\n                _user,\\n                userCollateralAmount - collateralAmountIn\\n            );\\n        }\\n\\n        // update total info\\n        totalDebtAmount -= debtAmount;\\n        totalDebtPortion -= position.debtPortion;\\n        collateralTotalShares[_token] -= position.shares;\\n\\n        // remove user position\\n        position.shares = 0;\\n        position.debtPortion = 0;\\n        position.debtPrincipal = 0;\\n\\n        emit Liquidate(_user, _token, debtAmount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice returns a user's collateral position\\n     * @return position this includes a user's collateral, debt, liquidation data.\\n     */\\n    function positionView(address _user, address _token)\\n        external\\n        view\\n        override\\n        returns (PositionView memory)\\n    {\\n        Position memory position = userPositions[_user][_token];\\n\\n        // this is a copy from _debtUSD but should include additional-interest calculation\\n        uint256 debtCalculated = totalDebtPortion == 0\\n            ? 0\\n            : ((totalDebtAmount + _calculateInterestFromLastTime()) *\\n                userPositions[_user][_token].debtPortion) / totalDebtPortion;\\n        uint256 debtPrincipal = userPositions[_user][_token].debtPrincipal;\\n        uint256 debtAmount = debtPrincipal > debtCalculated\\n            ? debtPrincipal\\n            : debtCalculated;\\n\\n        uint256 collateralAmount = amountFromShares(_token, position.shares);\\n        return\\n            PositionView({\\n                owner: _user,\\n                token: _token,\\n                amount: collateralAmount,\\n                amountUSD: _tokenUSD(_token, collateralAmount),\\n                creditLimitUSD: _creditLimitUSD(_user, _token),\\n                debtPrincipal: position.debtPrincipal,\\n                debtInterest: debtAmount - position.debtPrincipal,\\n                liquidatable: debtAmount >= _liquidateLimitUSD(_user, _token)\\n            });\\n    }\\n\\n    function liquidatable(address _user, address _token)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        // this is a copy from _debtUSD but should include additional-interest calculation\\n        uint256 debtCalculated = totalDebtPortion == 0\\n            ? 0\\n            : ((totalDebtAmount + _calculateInterestFromLastTime()) *\\n                userPositions[_user][_token].debtPortion) / totalDebtPortion;\\n        uint256 debtPrincipal = userPositions[_user][_token].debtPrincipal;\\n        uint256 debtAmount = debtPrincipal > debtCalculated\\n            ? debtPrincipal\\n            : debtCalculated;\\n\\n        return debtAmount >= _liquidateLimitUSD(_user, _token);\\n    }\\n\\n    function getUserCount(address _token)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return marketUsers[_token].length;\\n    }\\n\\n    function getUserAt(address _token, uint256 _index)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return marketUsers[_token][_index];\\n    }\\n\\n    function collateralTotalAmount(address _token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return IERC20(_token).balanceOf(address(this));\\n    }\\n\\n    function amountFromShares(address _token, uint256 _shares)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalShares = collateralTotalShares[_token];\\n        uint256 totalAmount = collateralTotalAmount(_token);\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return _shares;\\n        }\\n\\n        return (_shares * totalAmount) / totalShares;\\n    }\\n\\n    function sharesFromAmount(address _token, uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalShares = collateralTotalShares[_token];\\n        uint256 totalAmount = collateralTotalAmount(_token);\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return _amount;\\n        }\\n\\n        return (_amount * totalShares) / totalAmount;\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * @notice validate rate denominator and numerator\\n     */\\n    function _validateRate(Rate memory rate) internal pure {\\n        require(\\n            rate.denominator > 0 && rate.denominator >= rate.numerator,\\n            \\\"invalid rate\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice calculate additional interest accrued from last time\\n     * @return The interest accrued from last time\\n     */\\n    function _calculateInterestFromLastTime() internal view returns (uint256) {\\n        // calculate elapsed time from last accrued at\\n        uint256 elapsedTime = block.timestamp - totalDebtAccruedAt;\\n\\n        // calculate interest based on elapsed time and interest APR\\n        return\\n            (elapsedTime * totalDebtAmount * settings.interestApr.numerator) /\\n            settings.interestApr.denominator /\\n            365 days;\\n    }\\n\\n    /**\\n     * @notice returns the USD amount\\n     * @param token collateral token address\\n     * @param amount token amount\\n     * @return The USD amount in 18 decimals\\n     */\\n    function _tokenUSD(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // get price from collateral token oracle contract\\n        uint256 price = IPriceOracleAggregator(\\n            addressProvider.getPriceOracleAggregator()\\n        ).viewPriceInUSD(token);\\n\\n        // convert to 18 decimals\\n        return\\n            (amount * price * 10**10) /\\n            (10**collateralSettings[token].decimals);\\n    }\\n\\n    /**\\n     * @notice returns the borrow limit amount in USD\\n     * @param _user user address\\n     * @param _token collateral token address\\n     * @return The USD amount in 18 decimals\\n     */\\n    function _creditLimitUSD(address _user, address _token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amount = amountFromShares(\\n            _token,\\n            userPositions[_user][_token].shares\\n        );\\n        uint256 totalUSD = _tokenUSD(_token, amount);\\n        return\\n            (totalUSD * collateralSettings[_token].creditLimitRate.numerator) /\\n            collateralSettings[_token].creditLimitRate.denominator;\\n    }\\n\\n    /**\\n     * @notice returns the liquidation threshold amount in USD\\n     * @param _user user address\\n     * @param _token collateral token address\\n     * @return The USD amount in 18 decimals\\n     */\\n    function _liquidateLimitUSD(address _user, address _token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amount = amountFromShares(\\n            _token,\\n            userPositions[_user][_token].shares\\n        );\\n        uint256 totalUSD = _tokenUSD(_token, amount);\\n        return\\n            (totalUSD * collateralSettings[_token].liqLimitRate.numerator) /\\n            collateralSettings[_token].liqLimitRate.denominator;\\n    }\\n\\n    /**\\n     * @notice returns the debt amount in USD\\n     * @param _user user address\\n     * @param _token collateral token address\\n     * @return The USD amount in 18 decimals\\n     */\\n    function _debtUSD(address _user, address _token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 debtCalculated = totalDebtPortion == 0\\n            ? 0\\n            : (totalDebtAmount * userPositions[_user][_token].debtPortion) /\\n                totalDebtPortion;\\n        uint256 debtPrincipal = userPositions[_user][_token].debtPrincipal;\\n\\n        return debtPrincipal > debtCalculated ? debtPrincipal : debtCalculated; // consider of round at debt calculation\\n    }\\n\\n    /**\\n     * @notice transfer airUSD fee to staking (80%) and treasury (20%)\\n     * @param _fee fee amount\\n     * @param _mint airUSD mint or transfer\\n     */\\n    function _transferFee(uint256 _fee, bool _mint) internal {\\n        address treasury = addressProvider.getTreasury();\\n        uint256 treasuryFee = _fee / 5;\\n\\n        address staking = addressProvider.getStaking();\\n        uint256 stakingFee = _fee - treasuryFee;\\n\\n        if (_mint) {\\n            airUSD.mint(treasury, treasuryFee);\\n            airUSD.mint(staking, stakingFee);\\n        } else {\\n            airUSD.safeTransfer(treasury, treasuryFee);\\n            airUSD.safeTransfer(staking, stakingFee);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe9f15b2f343642169fc626471f234555822f731b96fd0929979bebef47da2e24\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAirUSD.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IAirUSD is IERC20 {\\n    function mint(address _to, uint256 _value) external;\\n\\n    function burn(uint256 _value) external;\\n\\n    function burnFrom(address _from, uint256 _value) external;\\n}\",\"keccak256\":\"0xc2fb2bc3c29138c1bbf292deb614a034c64680f765465af9a65731fa2fb91396\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILendingAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface ILendingAddressRegistry {\\n    function initialize(\\n        address lendingMarket,\\n        address priceOracleAggregator,\\n        address treasury,\\n        address staking,\\n        address stablePool,\\n        address swapper\\n    ) external;\\n\\n    function getLendingMarket() external view returns (address);\\n\\n    function setLendingMarket(address lendingMarket) external;\\n\\n    function getPriceOracleAggregator() external view returns (address);\\n\\n    function setPriceOracleAggregator(address priceOracleAggregator) external;\\n\\n    function getTreasury() external view returns (address);\\n\\n    function setTreasury(address treasury) external;\\n\\n    function getStaking() external view returns (address);\\n\\n    function setStaking(address staking) external;\\n\\n    function getStablePool() external view returns (address);\\n\\n    function setStablePool(address stablePool) external;\\n\\n    function getSwapper() external view returns (address);\\n\\n    function setSwapper(address swapper) external;\\n\\n    function getKeepers() external view returns (address[] memory);\\n\\n    function addKeeper(address keeper) external;\\n\\n    function isKeeper(address keeper) external view returns (bool);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3f80ab7dfa68c4a3d71b408bcb0d314db3e7b11f23138caa94e4c0cc186c0f48\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILendingMarket {\\n    function getUserCount(address _token) external view returns (uint256);\\n\\n    function getUserAt(address _token, uint256 _index)\\n        external\\n        view\\n        returns (address user);\\n\\n    /// @notice A struct to preview a user's collateral position\\n    struct PositionView {\\n        address owner;\\n        address token;\\n        uint256 amount;\\n        uint256 amountUSD;\\n        uint256 creditLimitUSD;\\n        uint256 debtPrincipal;\\n        uint256 debtInterest;\\n        bool liquidatable;\\n    }\\n\\n    function positionView(address _user, address _token)\\n        external\\n        view\\n        returns (PositionView memory);\\n\\n    function liquidatable(address _user, address _token)\\n        external\\n        view\\n        returns (bool);\\n\\n    function liquidate(address _user, address _token) external;\\n}\\n\",\"keccak256\":\"0x971337baecffff60e671259aa6c8f23ceb0bba5847be678ed798845e209944f8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function viewPriceInUSD() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe5b34342f79a145ea2d3e8da896db1c69997e92f3c9ea10a547b8f1a3667fb85\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IPriceOracleAggregator {\\n    event UpdateOracle(address token, IOracle oracle);\\n\\n    function updateOracleForAsset(address _asset, IOracle _oracle) external;\\n\\n    function viewPriceInUSD(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x229cdb37d61707038fb23292159394e2ea8a64bac261fea806c735f9ff535334\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn,\\n        address _to\\n    ) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xa2376f85df3601712e155bf994d95e4427963f60930c9c7949f28b3ad8d8a90e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061346f806100206000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c806386b9d81f1161011a578063c287aa16116100ad578063f2fde38b1161007c578063f2fde38b14610594578063f3fef3a3146105a7578063f45346dc146105ba578063f8ba4cff146105cd578063faae9564146105d557600080fd5b8063c287aa1614610480578063c8dffa9514610502578063e06174e41461050b578063eaed734a1461058157600080fd5b8063a34efe98116100e9578063a34efe9814610446578063a6f7acce1461044f578063ac853c5e14610464578063b9b2b5cd1461047757600080fd5b806386b9d81f146103ef5780638da5cb5b1461040257806391aabd201461041357806394f9059f1461043357600080fd5b80634a3c815c11610192578063715018a611610161578063715018a61461032a5780637333b679146103325780637b8f93de146103c457806382df39de146103cc57600080fd5b80634a3c815c146102e85780634b8a3529146102f15780634e2c265714610304578063541f3c3b1461031757600080fd5b806322867d78116101ce57806322867d781461028f5780632954018c146102a257806341a70715146102b5578063490be99f146102c857600080fd5b806303e8837c146102005780630dc1bac81461023c578063172c48c7146102515780631a5fa2e31461027c575b600080fd5b61022961020e366004612cf9565b6001600160a01b0316600090815260a1602052604090205490565b6040519081526020015b60405180910390f35b61024f61024a366004612d9e565b6105e8565b005b61026461025f366004612e59565b61075f565b6040516001600160a01b039091168152602001610233565b61024f61028a366004612cf9565b610789565b61024f61029d366004612e72565b6107d5565b609754610264906001600160a01b031681565b6102296102c3366004612e72565b610a5a565b6102296102d6366004612cf9565b609e6020526000908152604090205481565b61022960a45481565b61024f6102ff366004612e72565b610ab9565b61024f610312366004612e9e565b610dd0565b609854610264906001600160a01b031681565b61024f610fef565b6103b3610340366004612cf9565b609d6020908152600091825260409182902080548351808501855260018301546001600160801b038082168352600160801b91829004811683870152865180880190975260028501548082168852919091041693850193909352600382015460049092015460ff91821694929091169085565b604051610233959493929190612eed565b61024f611025565b6103df6103da366004612f4c565b611098565b6040519015158152602001610233565b61024f6103fd366004612f4c565b611156565b6033546001600160a01b0316610264565b610229610421366004612cf9565b60a06020526000908152604090205481565b61024f610441366004612cf9565b6118d9565b61022960a55481565b610457611aa9565b6040516102339190612f85565b610229610472366004612e72565b611b0b565b61022960a65481565b61049361048e366004612f4c565b611b55565b604051610233919060006101008201905060018060a01b038084511683528060208501511660208401525060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e0830151151560e083015292915050565b61022960a35481565b6040805180820182526099546001600160801b038082168352600160801b91829004811660208085019190915284518086018652609a5480841682528490048316818301528551808701909652609b54808416875293909304909116908401526105729283565b60405161023393929190612fd2565b61022961058f366004612cf9565b611d3a565b61024f6105a2366004612cf9565b611db4565b61024f6105b5366004612e72565b611e4f565b61024f6105c836600461302c565b612067565b61024f61223d565b6102646105e3366004612e72565b612283565b600054610100900460ff166106035760005460ff1615610607565b303b155b61066f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610691576000805461ffff19166101011790555b6106996122c9565b6106a1612300565b81516106ac9061232f565b6106b9826020015161232f565b6106c6826040015161232f565b609780546001600160a01b038087166001600160a01b0319928316179092556098805492861692909116919091179055815180516020918201516001600160801b03908116600160801b90810292821692909217609955828501518051908401518216830290821617609a55604085015180519301518116909102911617609b558015610759576000805461ff00191690555b50505050565b609c818154811061076f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146107b35760405162461bcd60e51b81526004016106669061306e565b609780546001600160a01b0319166001600160a01b0392909216919091179055565b600260655414156107f85760405162461bcd60e51b8152600401610666906130a3565b60026065556001600160a01b0382166000908152609d602052604090205460ff166108355760405162461bcd60e51b8152600401610666906130da565b61083d61223d565b6000811161087e5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610666565b336000818152609f602090815260408083206001600160a01b03871684529091528120916108ac90856123a1565b600183015490915060006108c08284613117565b90508285116108cf57846108d1565b825b60985460405163079cc67960e41b8152336004820152602481018390529196506001600160a01b0316906379cc679090604401600060405180830381600087803b15801561091e57600080fd5b505af1158015610932573d6000803e3d6000fd5b505050506000818611610946576000610950565b6109508287613117565b9050600083821461097b5760a3548760a55461096c919061312e565b610976919061314d565b610981565b85600201545b90508660a360008282546109959190613117565b925050819055508060a560008282546109ae9190613117565b92505081905550818660010160008282546109c99190613117565b92505081905550808660020160008282546109e49190613117565b90915550506001600160a01b038816600090815260a0602052604081208054849290610a11908490613117565b909155505060405187815233907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a5942319060200160405180910390a250506001606555505050505050565b6001600160a01b0382166000908152609e602052604081205481610a7d85611d3a565b9050811580610a8a575080155b15610a99578392505050610ab3565b81610aa4828661312e565b610aae919061314d565b925050505b92915050565b60026065541415610adc5760405162461bcd60e51b8152600401610666906130a3565b60026065556001600160a01b0382166000908152609d602052604090205460ff16610b195760405162461bcd60e51b8152600401610666906130da565b610b2161223d565b6000610b2d338461243a565b90506000610b3b33856123a1565b905081610b48848361316f565b1115610b665760405162461bcd60e51b815260040161066690613187565b6001600160a01b0384166000908152609d602090815260408083206004015460a090925290912054610b9990859061316f565b1115610bdc5760405162461bcd60e51b8152602060048201526012602482015271189bdc9c9bddc818d85c081c995858da195960721b6044820152606401610666565b609a546000906001600160801b03600160801b8204811691610bff91168661312e565b610c09919061314d565b90508060a66000828254610c1d919061316f565b90915550506098546001600160a01b03166340c10f1933610c3e8488613117565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610c8457600080fd5b505af1158015610c98573d6000803e3d6000fd5b5050336000908152609f602090815260408083206001600160a01b038b168452909152902060a55490925015159050610cdc5760a585905560028101859055610d2f565b600060a3548660a554610cef919061312e565b610cf9919061314d565b90508060a56000828254610d0d919061316f565b9250508190555080826002016000828254610d28919061316f565b9091555050505b84816001016000828254610d43919061316f565b925050819055508460a36000828254610d5c919061316f565b90915550506001600160a01b038616600090815260a0602052604081208054879290610d8990849061316f565b909155505060405185815233907fac59582e5396aca512fa873a2047e7f4c80f8f55d4a06cb34a78a0187f62719f9060200160405180910390a25050600160655550505050565b6033546001600160a01b03163314610dfa5760405162461bcd60e51b81526004016106669061306e565b610e038361232f565b610e0c8261232f565b6001600160a01b0384166000908152609d602052604090205460ff1615610e755760405162461bcd60e51b815260206004820152601760248201527f636f6c6c61746572616c20746f6b656e206578697374730000000000000000006044820152606401610666565b6040518060a00160405280600115158152602001848152602001838152602001856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ece57600080fd5b505afa158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0691906131be565b60ff90811682526020918201939093526001600160a01b039095166000818152609d875260408082208451815490151560ff19918216178255858a01518051908b01516001600160801b03908116600160801b908102928216929092176001808601919091559488015180519c015181169091029a16999099176002820155606085015160038201805491909716991698909817909455608090920151600490960195909555609c8054928301815590527faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c0180546001600160a01b0319169093179092555050565b6033546001600160a01b031633146110195760405162461bcd60e51b81526004016106669061306e565b61102360006124b9565b565b600260655414156110485760405162461bcd60e51b8152600401610666906130a3565b60026065556033546001600160a01b031633146110775760405162461bcd60e51b81526004016106669061306e565b61107f61223d565b61108c60a654600161250b565b600060a6556001606555565b60008060a5546000146110ff5760a5546001600160a01b038086166000908152609f60209081526040808320938816835292905220600201546110d961273e565b60a3546110e6919061316f565b6110f0919061312e565b6110fa919061314d565b611102565b60005b6001600160a01b038086166000908152609f6020908152604080832093881683529290529081206001015491925082821161113d578261113f565b815b905061114b86866127a0565b111595945050505050565b600260655414156111795760405162461bcd60e51b8152600401610666906130a3565b60026065556097546040516335d2155560e11b81523360048201526001600160a01b0390911690636ba42aaa9060240160206040518083038186803b1580156111c157600080fd5b505afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f991906131e1565b6112325760405162461bcd60e51b815260206004820152600a6024820152693737ba1035b2b2b832b960b11b6044820152606401610666565b6001600160a01b0381166000908152609d602052604090205460ff1661126a5760405162461bcd60e51b8152600401610666906130da565b61127261223d565b6001600160a01b038083166000908152609f602090815260408083209385168352929052908120906112a484846123a1565b90506112b084846127a0565b8110156112f25760405162461bcd60e51b815260206004820152601060248201526f6e6f74206c6971756964617461626c6560801b6044820152606401610666565b60985460405163079cc67960e41b8152336004820152602481018390526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561133e57600080fd5b505af1158015611352573d6000803e3d6000fd5b505050506000609760009054906101000a90046001600160a01b03166001600160a01b0316632ea451be6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113a657600080fd5b505afa1580156113ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113de9190613203565b60405163eb9d14a960e01b81526001600160a01b038681166004830152919091169063eb9d14a99060240160206040518083038186803b15801561142157600080fd5b505afa158015611435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114599190613220565b609b549091506000906001600160801b03600160801b820481169161147f91168561312e565b611489919061314d565b611493908461316f565b6001600160a01b0386166000908152609d6020526040812060030154919250906402540be4009084906114ca9060ff16600a61331d565b6114d4908561312e565b6114de919061314d565b6114e8919061314d565b905060006114fa878760000154610a5a565b9050808211156115445760405162461bcd60e51b81526020600482015260156024820152741b9bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401610666565b609754604080516343ad12af60e01b815290516000926001600160a01b0316916343ad12af916004808301926020929190829003018186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c19190613203565b60405163095ea7b360e01b81526001600160a01b038083166004830152602482018690529192509089169063095ea7b390604401602060405180830381600087803b15801561160f57600080fd5b505af1158015611623573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164791906131e1565b50609854604051631ba0488760e21b81526001600160a01b038a81166004830152918216602482015260448101859052306064820152600091831690636e81221c90608401602060405180830381600087803b1580156116a657600080fd5b505af11580156116ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116de9190613220565b905086811161171e5760405162461bcd60e51b815260206004820152600c60248201526b7a65726f2070656e616c747960a01b6044820152606401610666565b600061172a8883613117565b6098549091506001600160a01b031663a9059cbb3361174a60028561314d565b611754908c61316f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561179a57600080fd5b505af11580156117ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d291906131e1565b506117e86117e160028361314d565b600061250b565b8484111561180f5761180f8b6117fe8787613117565b6001600160a01b038d16919061281f565b8760a360008282546118219190613117565b9091555050600289015460a5805460009061183d908490613117565b909155505088546001600160a01b038b166000908152609e60205260408120805490919061186c908490613117565b90915550506000808a5560028a0181905560018a015560405188815233906001600160a01b038c811691908e16907f60b8242c7715592d395c118b86e1c56e483030f45fab92e8694eda9f1a837f5e9060200160405180910390a450506001606555505050505050505050565b6033546001600160a01b031633146119035760405162461bcd60e51b81526004016106669061306e565b6001600160a01b0381166000908152609d602052604090205460ff1661196b5760405162461bcd60e51b815260206004820152601860248201527f696e76616c696420636f6c6c61746572616c20746f6b656e00000000000000006044820152606401610666565b609c546000905b808210156119c957826001600160a01b0316609c83815481106119975761199761332c565b6000918252602090912001546001600160a01b031614156119b7576119c9565b816119c181613342565b925050611972565b609c6119d6600183613117565b815481106119e6576119e661332c565b600091825260209091200154609c80546001600160a01b039092169184908110611a1257611a1261332c565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055609c611a48600183613117565b81548110611a5857611a5861332c565b600091825260209091200180546001600160a01b0319169055609c805480611a8257611a8261335d565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6060609c805480602002602001604051908101604052809291908181526020018280548015611b0157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ae3575b5050505050905090565b6001600160a01b0382166000908152609e602052604081205481611b2e85611d3a565b9050811580611b3b575080155b15611b4a578392505050610ab3565b80610aa4838661312e565b611bb160405180610100016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6001600160a01b038084166000908152609f602090815260408083209386168352928152828220835160608101855281548152600182015492810192909252600201549281019290925260a55415611c5d5760a5546001600160a01b038087166000908152609f6020908152604080832093891683529290522060020154611c3761273e565b60a354611c44919061316f565b611c4e919061312e565b611c58919061314d565b611c60565b60005b6001600160a01b038087166000908152609f60209081526040808320938916835292905290812060010154919250828211611c9b5782611c9d565b815b90506000611caf878660000151610a5a565b9050604051806101000160405280896001600160a01b03168152602001886001600160a01b03168152602001828152602001611ceb8984612887565b8152602001611cfa8a8a61243a565b815260200186602001518152602001866020015184611d199190613117565b8152602001611d288a8a6127a0565b90931015909252509695505050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611d7c57600080fd5b505afa158015611d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab39190613220565b6033546001600160a01b03163314611dde5760405162461bcd60e51b81526004016106669061306e565b6001600160a01b038116611e435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610666565b611e4c816124b9565b50565b60026065541415611e725760405162461bcd60e51b8152600401610666906130a3565b60026065556001600160a01b0382166000908152609d602052604090205460ff16611eaf5760405162461bcd60e51b8152600401610666906130da565b611eb761223d565b336000908152609f602090815260408083206001600160a01b0386168452909152812090611ee58484611b0b565b905082611ef28583610a5a565b1015611f0657611f0360018261316f565b90505b8154811115611f275760405162461bcd60e51b815260040161066690613187565b6001600160a01b0384166000908152609d602052604081206001015483546001600160801b03600160801b83048116921690611f75908890611f709082906102c3908990613117565b612887565b611f7f919061312e565b611f89919061314d565b90506000611f9733876123a1565b905081811115611fb95760405162461bcd60e51b815260040161066690613187565b82846000016000828254611fcd9190613117565b90915550506001600160a01b0386166000908152609e602052604081208054859290611ffa908490613117565b9091555061201490506001600160a01b038716338761281f565b60408051868152602081018590526001600160a01b0388169133917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567910160405180910390a35050600160655550505050565b6002606554141561208a5760405162461bcd60e51b8152600401610666906130a3565b60026065556001600160a01b0383166000908152609d602052604090205460ff166120c75760405162461bcd60e51b8152600401610666906130da565b60006120d38484611b0b565b90506120ea6001600160a01b0385163330866129db565b6001600160a01b038083166000908152609f602090815260408083209388168352929052908120805483929061212190849061316f565b90915550506001600160a01b0384166000908152609e60205260408120805483929061214e90849061316f565b90915550506001600160a01b03808316600090815260a2602090815260408083209388168352929052205460ff166121dc576001600160a01b03808316600081815260a2602090815260408083209489168352938152838220805460ff1916600190811790915560a18252938220805494850181558252902090910180546001600160a01b03191690911790555b836001600160a01b0316826001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7858460405161222a929190918252602082015260400190565b60405180910390a3505060016065555050565b600061224761273e565b90504260a4819055508060a36000828254612262919061316f565b925050819055508060a6600082825461227b919061316f565b909155505050565b6001600160a01b038216600090815260a1602052604081208054839081106122ad576122ad61332c565b6000918252602090912001546001600160a01b03169392505050565b600054610100900460ff166122f05760405162461bcd60e51b815260040161066690613373565b6122f8612a13565b611023612a3a565b600054610100900460ff166123275760405162461bcd60e51b815260040161066690613373565b611023612a6a565b600081602001516001600160801b0316118015612366575080600001516001600160801b031681602001516001600160801b031610155b611e4c5760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964207261746560a01b6044820152606401610666565b60008060a5546000146123f65760a5546001600160a01b038086166000908152609f602090815260408083209388168352929052206002015460a3546123e7919061312e565b6123f1919061314d565b6123f9565b60005b6001600160a01b038086166000908152609f60209081526040808320938816835292905220600101549091508181116124325781610aae565b949350505050565b6001600160a01b038083166000908152609f60209081526040808320938516835292905290812054819061246f908490610a5a565b9050600061247d8483612887565b6001600160a01b0385166000908152609d60205260409020600101549091506001600160801b03600160801b8204811691610aa491168361312e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460408051631d8cf42560e11b815290516000926001600160a01b031691633b19e84a916004808301926020929190829003018186803b15801561255057600080fd5b505afa158015612564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125889190613203565b9050600061259760058561314d565b90506000609760009054906101000a90046001600160a01b03166001600160a01b0316637b1391a66040518163ffffffff1660e01b815260040160206040518083038186803b1580156125e957600080fd5b505afa1580156125fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126219190613203565b9050600061262f8387613117565b90508415612708576098546040516340c10f1960e01b81526001600160a01b03868116600483015260248201869052909116906340c10f1990604401600060405180830381600087803b15801561268557600080fd5b505af1158015612699573d6000803e3d6000fd5b50506098546040516340c10f1960e01b81526001600160a01b0386811660048301526024820186905290911692506340c10f199150604401600060405180830381600087803b1580156126eb57600080fd5b505af11580156126ff573d6000803e3d6000fd5b50505050612736565b60985461271f906001600160a01b0316858561281f565b609854612736906001600160a01b0316838361281f565b505050505050565b60008060a4544261274f9190613117565b60995460a3549192506301e13380916001600160801b03600160801b8304811692169061277c908561312e565b612786919061312e565b612790919061314d565b61279a919061314d565b91505090565b6001600160a01b038083166000908152609f6020908152604080832093851683529290529081205481906127d5908490610a5a565b905060006127e38483612887565b6001600160a01b0385166000908152609d60205260409020600201549091506001600160801b03600160801b8204811691610aa491168361312e565b6040516001600160a01b03831660248201526044810182905261288290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a98565b505050565b600080609760009054906101000a90046001600160a01b03166001600160a01b0316632ea451be6040518163ffffffff1660e01b815260040160206040518083038186803b1580156128d857600080fd5b505afa1580156128ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129109190613203565b60405163eb9d14a960e01b81526001600160a01b038681166004830152919091169063eb9d14a99060240160206040518083038186803b15801561295357600080fd5b505afa158015612967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298b9190613220565b6001600160a01b0385166000908152609d60205260409020600301549091506129b89060ff16600a61331d565b6129c2828561312e565b6129d1906402540be40061312e565b612432919061314d565b6040516001600160a01b03808516602483015283166044820152606481018290526107599085906323b872dd60e01b9060840161284b565b600054610100900460ff166110235760405162461bcd60e51b815260040161066690613373565b600054610100900460ff16612a615760405162461bcd60e51b815260040161066690613373565b611023336124b9565b600054610100900460ff16612a915760405162461bcd60e51b815260040161066690613373565b6001606555565b6000612aed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b6a9092919063ffffffff16565b8051909150156128825780806020019051810190612b0b91906131e1565b6128825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610666565b6060612b798484600085612b83565b90505b9392505050565b606082471015612be45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610666565b843b612c325760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610666565b600080866001600160a01b03168587604051612c4e91906133ea565b60006040518083038185875af1925050503d8060008114612c8b576040519150601f19603f3d011682016040523d82523d6000602084013e612c90565b606091505b5091509150612ca0828286612cab565b979650505050505050565b60608315612cba575081612b7c565b825115612cca5782518084602001fd5b8160405162461bcd60e51b81526004016106669190613406565b6001600160a01b0381168114611e4c57600080fd5b600060208284031215612d0b57600080fd5b8135612b7c81612ce4565b80356001600160801b0381168114612d2d57600080fd5b919050565b600060408284031215612d4457600080fd5b6040516040810181811067ffffffffffffffff82111715612d7557634e487b7160e01b600052604160045260246000fd5b604052905080612d8483612d16565b8152612d9260208401612d16565b60208201525092915050565b6000806000838503610100811215612db557600080fd5b8435612dc081612ce4565b93506020850135612dd081612ce4565b925060c0603f1982011215612de457600080fd5b506040516060810181811067ffffffffffffffff82111715612e1657634e487b7160e01b600052604160045260246000fd5b8060405250612e288660408701612d32565b8152612e378660808701612d32565b6020820152612e498660c08701612d32565b6040820152809150509250925092565b600060208284031215612e6b57600080fd5b5035919050565b60008060408385031215612e8557600080fd5b8235612e9081612ce4565b946020939093013593505050565b60008060008060c08587031215612eb457600080fd5b8435612ebf81612ce4565b9350612ece8660208701612d32565b9250612edd8660608701612d32565b9396929550929360a00135925050565b851515815260e08101612f19602083018780516001600160801b03908116835260209182015116910152565b84516001600160801b039081166060840152602086015116608083015260ff9390931660a082015260c001529392505050565b60008060408385031215612f5f57600080fd5b8235612f6a81612ce4565b91506020830135612f7a81612ce4565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015612fc65783516001600160a01b031683529284019291840191600101612fa1565b50909695505050505050565b60c08101612ff6828680516001600160801b03908116835260209182015116910152565b83516001600160801b039081166040840152602080860151821660608501528451821660808501528401511660a0830152612432565b60008060006060848603121561304157600080fd5b833561304c81612ce4565b925060208401359150604084013561306381612ce4565b809150509250925092565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600d908201526c34b73b30b634b2103a37b5b2b760991b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561312957613129613101565b500390565b600081600019048311821515161561314857613148613101565b500290565b60008261316a57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561318257613182613101565b500190565b60208082526017908201527f696e73756666696369656e7420636f6c6c61746572616c000000000000000000604082015260600190565b6000602082840312156131d057600080fd5b815160ff81168114612b7c57600080fd5b6000602082840312156131f357600080fd5b81518015158114612b7c57600080fd5b60006020828403121561321557600080fd5b8151612b7c81612ce4565b60006020828403121561323257600080fd5b5051919050565b600181815b8085111561327457816000190482111561325a5761325a613101565b8085161561326757918102915b93841c939080029061323e565b509250929050565b60008261328b57506001610ab3565b8161329857506000610ab3565b81600181146132ae57600281146132b8576132d4565b6001915050610ab3565b60ff8411156132c9576132c9613101565b50506001821b610ab3565b5060208310610133831016604e8410600b84101617156132f7575081810a610ab3565b6133018383613239565b806000190482111561331557613315613101565b029392505050565b6000612b7c60ff84168361327c565b634e487b7160e01b600052603260045260246000fd5b600060001982141561335657613356613101565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156133d95781810151838201526020016133c1565b838111156107595750506000910152565b600082516133fc8184602087016133be565b9190910192915050565b60208152600082518060208401526134258160408501602087016133be565b601f01601f1916919091016040019291505056fea2646970667358221220857b637a3daff5fc60e6480909ccf658c9174799c43ada7826cd75aa2161636b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c806386b9d81f1161011a578063c287aa16116100ad578063f2fde38b1161007c578063f2fde38b14610594578063f3fef3a3146105a7578063f45346dc146105ba578063f8ba4cff146105cd578063faae9564146105d557600080fd5b8063c287aa1614610480578063c8dffa9514610502578063e06174e41461050b578063eaed734a1461058157600080fd5b8063a34efe98116100e9578063a34efe9814610446578063a6f7acce1461044f578063ac853c5e14610464578063b9b2b5cd1461047757600080fd5b806386b9d81f146103ef5780638da5cb5b1461040257806391aabd201461041357806394f9059f1461043357600080fd5b80634a3c815c11610192578063715018a611610161578063715018a61461032a5780637333b679146103325780637b8f93de146103c457806382df39de146103cc57600080fd5b80634a3c815c146102e85780634b8a3529146102f15780634e2c265714610304578063541f3c3b1461031757600080fd5b806322867d78116101ce57806322867d781461028f5780632954018c146102a257806341a70715146102b5578063490be99f146102c857600080fd5b806303e8837c146102005780630dc1bac81461023c578063172c48c7146102515780631a5fa2e31461027c575b600080fd5b61022961020e366004612cf9565b6001600160a01b0316600090815260a1602052604090205490565b6040519081526020015b60405180910390f35b61024f61024a366004612d9e565b6105e8565b005b61026461025f366004612e59565b61075f565b6040516001600160a01b039091168152602001610233565b61024f61028a366004612cf9565b610789565b61024f61029d366004612e72565b6107d5565b609754610264906001600160a01b031681565b6102296102c3366004612e72565b610a5a565b6102296102d6366004612cf9565b609e6020526000908152604090205481565b61022960a45481565b61024f6102ff366004612e72565b610ab9565b61024f610312366004612e9e565b610dd0565b609854610264906001600160a01b031681565b61024f610fef565b6103b3610340366004612cf9565b609d6020908152600091825260409182902080548351808501855260018301546001600160801b038082168352600160801b91829004811683870152865180880190975260028501548082168852919091041693850193909352600382015460049092015460ff91821694929091169085565b604051610233959493929190612eed565b61024f611025565b6103df6103da366004612f4c565b611098565b6040519015158152602001610233565b61024f6103fd366004612f4c565b611156565b6033546001600160a01b0316610264565b610229610421366004612cf9565b60a06020526000908152604090205481565b61024f610441366004612cf9565b6118d9565b61022960a55481565b610457611aa9565b6040516102339190612f85565b610229610472366004612e72565b611b0b565b61022960a65481565b61049361048e366004612f4c565b611b55565b604051610233919060006101008201905060018060a01b038084511683528060208501511660208401525060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e0830151151560e083015292915050565b61022960a35481565b6040805180820182526099546001600160801b038082168352600160801b91829004811660208085019190915284518086018652609a5480841682528490048316818301528551808701909652609b54808416875293909304909116908401526105729283565b60405161023393929190612fd2565b61022961058f366004612cf9565b611d3a565b61024f6105a2366004612cf9565b611db4565b61024f6105b5366004612e72565b611e4f565b61024f6105c836600461302c565b612067565b61024f61223d565b6102646105e3366004612e72565b612283565b600054610100900460ff166106035760005460ff1615610607565b303b155b61066f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610691576000805461ffff19166101011790555b6106996122c9565b6106a1612300565b81516106ac9061232f565b6106b9826020015161232f565b6106c6826040015161232f565b609780546001600160a01b038087166001600160a01b0319928316179092556098805492861692909116919091179055815180516020918201516001600160801b03908116600160801b90810292821692909217609955828501518051908401518216830290821617609a55604085015180519301518116909102911617609b558015610759576000805461ff00191690555b50505050565b609c818154811061076f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146107b35760405162461bcd60e51b81526004016106669061306e565b609780546001600160a01b0319166001600160a01b0392909216919091179055565b600260655414156107f85760405162461bcd60e51b8152600401610666906130a3565b60026065556001600160a01b0382166000908152609d602052604090205460ff166108355760405162461bcd60e51b8152600401610666906130da565b61083d61223d565b6000811161087e5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610666565b336000818152609f602090815260408083206001600160a01b03871684529091528120916108ac90856123a1565b600183015490915060006108c08284613117565b90508285116108cf57846108d1565b825b60985460405163079cc67960e41b8152336004820152602481018390529196506001600160a01b0316906379cc679090604401600060405180830381600087803b15801561091e57600080fd5b505af1158015610932573d6000803e3d6000fd5b505050506000818611610946576000610950565b6109508287613117565b9050600083821461097b5760a3548760a55461096c919061312e565b610976919061314d565b610981565b85600201545b90508660a360008282546109959190613117565b925050819055508060a560008282546109ae9190613117565b92505081905550818660010160008282546109c99190613117565b92505081905550808660020160008282546109e49190613117565b90915550506001600160a01b038816600090815260a0602052604081208054849290610a11908490613117565b909155505060405187815233907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a5942319060200160405180910390a250506001606555505050505050565b6001600160a01b0382166000908152609e602052604081205481610a7d85611d3a565b9050811580610a8a575080155b15610a99578392505050610ab3565b81610aa4828661312e565b610aae919061314d565b925050505b92915050565b60026065541415610adc5760405162461bcd60e51b8152600401610666906130a3565b60026065556001600160a01b0382166000908152609d602052604090205460ff16610b195760405162461bcd60e51b8152600401610666906130da565b610b2161223d565b6000610b2d338461243a565b90506000610b3b33856123a1565b905081610b48848361316f565b1115610b665760405162461bcd60e51b815260040161066690613187565b6001600160a01b0384166000908152609d602090815260408083206004015460a090925290912054610b9990859061316f565b1115610bdc5760405162461bcd60e51b8152602060048201526012602482015271189bdc9c9bddc818d85c081c995858da195960721b6044820152606401610666565b609a546000906001600160801b03600160801b8204811691610bff91168661312e565b610c09919061314d565b90508060a66000828254610c1d919061316f565b90915550506098546001600160a01b03166340c10f1933610c3e8488613117565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610c8457600080fd5b505af1158015610c98573d6000803e3d6000fd5b5050336000908152609f602090815260408083206001600160a01b038b168452909152902060a55490925015159050610cdc5760a585905560028101859055610d2f565b600060a3548660a554610cef919061312e565b610cf9919061314d565b90508060a56000828254610d0d919061316f565b9250508190555080826002016000828254610d28919061316f565b9091555050505b84816001016000828254610d43919061316f565b925050819055508460a36000828254610d5c919061316f565b90915550506001600160a01b038616600090815260a0602052604081208054879290610d8990849061316f565b909155505060405185815233907fac59582e5396aca512fa873a2047e7f4c80f8f55d4a06cb34a78a0187f62719f9060200160405180910390a25050600160655550505050565b6033546001600160a01b03163314610dfa5760405162461bcd60e51b81526004016106669061306e565b610e038361232f565b610e0c8261232f565b6001600160a01b0384166000908152609d602052604090205460ff1615610e755760405162461bcd60e51b815260206004820152601760248201527f636f6c6c61746572616c20746f6b656e206578697374730000000000000000006044820152606401610666565b6040518060a00160405280600115158152602001848152602001838152602001856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ece57600080fd5b505afa158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0691906131be565b60ff90811682526020918201939093526001600160a01b039095166000818152609d875260408082208451815490151560ff19918216178255858a01518051908b01516001600160801b03908116600160801b908102928216929092176001808601919091559488015180519c015181169091029a16999099176002820155606085015160038201805491909716991698909817909455608090920151600490960195909555609c8054928301815590527faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c0180546001600160a01b0319169093179092555050565b6033546001600160a01b031633146110195760405162461bcd60e51b81526004016106669061306e565b61102360006124b9565b565b600260655414156110485760405162461bcd60e51b8152600401610666906130a3565b60026065556033546001600160a01b031633146110775760405162461bcd60e51b81526004016106669061306e565b61107f61223d565b61108c60a654600161250b565b600060a6556001606555565b60008060a5546000146110ff5760a5546001600160a01b038086166000908152609f60209081526040808320938816835292905220600201546110d961273e565b60a3546110e6919061316f565b6110f0919061312e565b6110fa919061314d565b611102565b60005b6001600160a01b038086166000908152609f6020908152604080832093881683529290529081206001015491925082821161113d578261113f565b815b905061114b86866127a0565b111595945050505050565b600260655414156111795760405162461bcd60e51b8152600401610666906130a3565b60026065556097546040516335d2155560e11b81523360048201526001600160a01b0390911690636ba42aaa9060240160206040518083038186803b1580156111c157600080fd5b505afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f991906131e1565b6112325760405162461bcd60e51b815260206004820152600a6024820152693737ba1035b2b2b832b960b11b6044820152606401610666565b6001600160a01b0381166000908152609d602052604090205460ff1661126a5760405162461bcd60e51b8152600401610666906130da565b61127261223d565b6001600160a01b038083166000908152609f602090815260408083209385168352929052908120906112a484846123a1565b90506112b084846127a0565b8110156112f25760405162461bcd60e51b815260206004820152601060248201526f6e6f74206c6971756964617461626c6560801b6044820152606401610666565b60985460405163079cc67960e41b8152336004820152602481018390526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561133e57600080fd5b505af1158015611352573d6000803e3d6000fd5b505050506000609760009054906101000a90046001600160a01b03166001600160a01b0316632ea451be6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113a657600080fd5b505afa1580156113ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113de9190613203565b60405163eb9d14a960e01b81526001600160a01b038681166004830152919091169063eb9d14a99060240160206040518083038186803b15801561142157600080fd5b505afa158015611435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114599190613220565b609b549091506000906001600160801b03600160801b820481169161147f91168561312e565b611489919061314d565b611493908461316f565b6001600160a01b0386166000908152609d6020526040812060030154919250906402540be4009084906114ca9060ff16600a61331d565b6114d4908561312e565b6114de919061314d565b6114e8919061314d565b905060006114fa878760000154610a5a565b9050808211156115445760405162461bcd60e51b81526020600482015260156024820152741b9bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401610666565b609754604080516343ad12af60e01b815290516000926001600160a01b0316916343ad12af916004808301926020929190829003018186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c19190613203565b60405163095ea7b360e01b81526001600160a01b038083166004830152602482018690529192509089169063095ea7b390604401602060405180830381600087803b15801561160f57600080fd5b505af1158015611623573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164791906131e1565b50609854604051631ba0488760e21b81526001600160a01b038a81166004830152918216602482015260448101859052306064820152600091831690636e81221c90608401602060405180830381600087803b1580156116a657600080fd5b505af11580156116ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116de9190613220565b905086811161171e5760405162461bcd60e51b815260206004820152600c60248201526b7a65726f2070656e616c747960a01b6044820152606401610666565b600061172a8883613117565b6098549091506001600160a01b031663a9059cbb3361174a60028561314d565b611754908c61316f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561179a57600080fd5b505af11580156117ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d291906131e1565b506117e86117e160028361314d565b600061250b565b8484111561180f5761180f8b6117fe8787613117565b6001600160a01b038d16919061281f565b8760a360008282546118219190613117565b9091555050600289015460a5805460009061183d908490613117565b909155505088546001600160a01b038b166000908152609e60205260408120805490919061186c908490613117565b90915550506000808a5560028a0181905560018a015560405188815233906001600160a01b038c811691908e16907f60b8242c7715592d395c118b86e1c56e483030f45fab92e8694eda9f1a837f5e9060200160405180910390a450506001606555505050505050505050565b6033546001600160a01b031633146119035760405162461bcd60e51b81526004016106669061306e565b6001600160a01b0381166000908152609d602052604090205460ff1661196b5760405162461bcd60e51b815260206004820152601860248201527f696e76616c696420636f6c6c61746572616c20746f6b656e00000000000000006044820152606401610666565b609c546000905b808210156119c957826001600160a01b0316609c83815481106119975761199761332c565b6000918252602090912001546001600160a01b031614156119b7576119c9565b816119c181613342565b925050611972565b609c6119d6600183613117565b815481106119e6576119e661332c565b600091825260209091200154609c80546001600160a01b039092169184908110611a1257611a1261332c565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055609c611a48600183613117565b81548110611a5857611a5861332c565b600091825260209091200180546001600160a01b0319169055609c805480611a8257611a8261335d565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6060609c805480602002602001604051908101604052809291908181526020018280548015611b0157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ae3575b5050505050905090565b6001600160a01b0382166000908152609e602052604081205481611b2e85611d3a565b9050811580611b3b575080155b15611b4a578392505050610ab3565b80610aa4838661312e565b611bb160405180610100016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6001600160a01b038084166000908152609f602090815260408083209386168352928152828220835160608101855281548152600182015492810192909252600201549281019290925260a55415611c5d5760a5546001600160a01b038087166000908152609f6020908152604080832093891683529290522060020154611c3761273e565b60a354611c44919061316f565b611c4e919061312e565b611c58919061314d565b611c60565b60005b6001600160a01b038087166000908152609f60209081526040808320938916835292905290812060010154919250828211611c9b5782611c9d565b815b90506000611caf878660000151610a5a565b9050604051806101000160405280896001600160a01b03168152602001886001600160a01b03168152602001828152602001611ceb8984612887565b8152602001611cfa8a8a61243a565b815260200186602001518152602001866020015184611d199190613117565b8152602001611d288a8a6127a0565b90931015909252509695505050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611d7c57600080fd5b505afa158015611d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab39190613220565b6033546001600160a01b03163314611dde5760405162461bcd60e51b81526004016106669061306e565b6001600160a01b038116611e435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610666565b611e4c816124b9565b50565b60026065541415611e725760405162461bcd60e51b8152600401610666906130a3565b60026065556001600160a01b0382166000908152609d602052604090205460ff16611eaf5760405162461bcd60e51b8152600401610666906130da565b611eb761223d565b336000908152609f602090815260408083206001600160a01b0386168452909152812090611ee58484611b0b565b905082611ef28583610a5a565b1015611f0657611f0360018261316f565b90505b8154811115611f275760405162461bcd60e51b815260040161066690613187565b6001600160a01b0384166000908152609d602052604081206001015483546001600160801b03600160801b83048116921690611f75908890611f709082906102c3908990613117565b612887565b611f7f919061312e565b611f89919061314d565b90506000611f9733876123a1565b905081811115611fb95760405162461bcd60e51b815260040161066690613187565b82846000016000828254611fcd9190613117565b90915550506001600160a01b0386166000908152609e602052604081208054859290611ffa908490613117565b9091555061201490506001600160a01b038716338761281f565b60408051868152602081018590526001600160a01b0388169133917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567910160405180910390a35050600160655550505050565b6002606554141561208a5760405162461bcd60e51b8152600401610666906130a3565b60026065556001600160a01b0383166000908152609d602052604090205460ff166120c75760405162461bcd60e51b8152600401610666906130da565b60006120d38484611b0b565b90506120ea6001600160a01b0385163330866129db565b6001600160a01b038083166000908152609f602090815260408083209388168352929052908120805483929061212190849061316f565b90915550506001600160a01b0384166000908152609e60205260408120805483929061214e90849061316f565b90915550506001600160a01b03808316600090815260a2602090815260408083209388168352929052205460ff166121dc576001600160a01b03808316600081815260a2602090815260408083209489168352938152838220805460ff1916600190811790915560a18252938220805494850181558252902090910180546001600160a01b03191690911790555b836001600160a01b0316826001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7858460405161222a929190918252602082015260400190565b60405180910390a3505060016065555050565b600061224761273e565b90504260a4819055508060a36000828254612262919061316f565b925050819055508060a6600082825461227b919061316f565b909155505050565b6001600160a01b038216600090815260a1602052604081208054839081106122ad576122ad61332c565b6000918252602090912001546001600160a01b03169392505050565b600054610100900460ff166122f05760405162461bcd60e51b815260040161066690613373565b6122f8612a13565b611023612a3a565b600054610100900460ff166123275760405162461bcd60e51b815260040161066690613373565b611023612a6a565b600081602001516001600160801b0316118015612366575080600001516001600160801b031681602001516001600160801b031610155b611e4c5760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964207261746560a01b6044820152606401610666565b60008060a5546000146123f65760a5546001600160a01b038086166000908152609f602090815260408083209388168352929052206002015460a3546123e7919061312e565b6123f1919061314d565b6123f9565b60005b6001600160a01b038086166000908152609f60209081526040808320938816835292905220600101549091508181116124325781610aae565b949350505050565b6001600160a01b038083166000908152609f60209081526040808320938516835292905290812054819061246f908490610a5a565b9050600061247d8483612887565b6001600160a01b0385166000908152609d60205260409020600101549091506001600160801b03600160801b8204811691610aa491168361312e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460408051631d8cf42560e11b815290516000926001600160a01b031691633b19e84a916004808301926020929190829003018186803b15801561255057600080fd5b505afa158015612564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125889190613203565b9050600061259760058561314d565b90506000609760009054906101000a90046001600160a01b03166001600160a01b0316637b1391a66040518163ffffffff1660e01b815260040160206040518083038186803b1580156125e957600080fd5b505afa1580156125fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126219190613203565b9050600061262f8387613117565b90508415612708576098546040516340c10f1960e01b81526001600160a01b03868116600483015260248201869052909116906340c10f1990604401600060405180830381600087803b15801561268557600080fd5b505af1158015612699573d6000803e3d6000fd5b50506098546040516340c10f1960e01b81526001600160a01b0386811660048301526024820186905290911692506340c10f199150604401600060405180830381600087803b1580156126eb57600080fd5b505af11580156126ff573d6000803e3d6000fd5b50505050612736565b60985461271f906001600160a01b0316858561281f565b609854612736906001600160a01b0316838361281f565b505050505050565b60008060a4544261274f9190613117565b60995460a3549192506301e13380916001600160801b03600160801b8304811692169061277c908561312e565b612786919061312e565b612790919061314d565b61279a919061314d565b91505090565b6001600160a01b038083166000908152609f6020908152604080832093851683529290529081205481906127d5908490610a5a565b905060006127e38483612887565b6001600160a01b0385166000908152609d60205260409020600201549091506001600160801b03600160801b8204811691610aa491168361312e565b6040516001600160a01b03831660248201526044810182905261288290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a98565b505050565b600080609760009054906101000a90046001600160a01b03166001600160a01b0316632ea451be6040518163ffffffff1660e01b815260040160206040518083038186803b1580156128d857600080fd5b505afa1580156128ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129109190613203565b60405163eb9d14a960e01b81526001600160a01b038681166004830152919091169063eb9d14a99060240160206040518083038186803b15801561295357600080fd5b505afa158015612967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298b9190613220565b6001600160a01b0385166000908152609d60205260409020600301549091506129b89060ff16600a61331d565b6129c2828561312e565b6129d1906402540be40061312e565b612432919061314d565b6040516001600160a01b03808516602483015283166044820152606481018290526107599085906323b872dd60e01b9060840161284b565b600054610100900460ff166110235760405162461bcd60e51b815260040161066690613373565b600054610100900460ff16612a615760405162461bcd60e51b815260040161066690613373565b611023336124b9565b600054610100900460ff16612a915760405162461bcd60e51b815260040161066690613373565b6001606555565b6000612aed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b6a9092919063ffffffff16565b8051909150156128825780806020019051810190612b0b91906131e1565b6128825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610666565b6060612b798484600085612b83565b90505b9392505050565b606082471015612be45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610666565b843b612c325760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610666565b600080866001600160a01b03168587604051612c4e91906133ea565b60006040518083038185875af1925050503d8060008114612c8b576040519150601f19603f3d011682016040523d82523d6000602084013e612c90565b606091505b5091509150612ca0828286612cab565b979650505050505050565b60608315612cba575081612b7c565b825115612cca5782518084602001fd5b8160405162461bcd60e51b81526004016106669190613406565b6001600160a01b0381168114611e4c57600080fd5b600060208284031215612d0b57600080fd5b8135612b7c81612ce4565b80356001600160801b0381168114612d2d57600080fd5b919050565b600060408284031215612d4457600080fd5b6040516040810181811067ffffffffffffffff82111715612d7557634e487b7160e01b600052604160045260246000fd5b604052905080612d8483612d16565b8152612d9260208401612d16565b60208201525092915050565b6000806000838503610100811215612db557600080fd5b8435612dc081612ce4565b93506020850135612dd081612ce4565b925060c0603f1982011215612de457600080fd5b506040516060810181811067ffffffffffffffff82111715612e1657634e487b7160e01b600052604160045260246000fd5b8060405250612e288660408701612d32565b8152612e378660808701612d32565b6020820152612e498660c08701612d32565b6040820152809150509250925092565b600060208284031215612e6b57600080fd5b5035919050565b60008060408385031215612e8557600080fd5b8235612e9081612ce4565b946020939093013593505050565b60008060008060c08587031215612eb457600080fd5b8435612ebf81612ce4565b9350612ece8660208701612d32565b9250612edd8660608701612d32565b9396929550929360a00135925050565b851515815260e08101612f19602083018780516001600160801b03908116835260209182015116910152565b84516001600160801b039081166060840152602086015116608083015260ff9390931660a082015260c001529392505050565b60008060408385031215612f5f57600080fd5b8235612f6a81612ce4565b91506020830135612f7a81612ce4565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015612fc65783516001600160a01b031683529284019291840191600101612fa1565b50909695505050505050565b60c08101612ff6828680516001600160801b03908116835260209182015116910152565b83516001600160801b039081166040840152602080860151821660608501528451821660808501528401511660a0830152612432565b60008060006060848603121561304157600080fd5b833561304c81612ce4565b925060208401359150604084013561306381612ce4565b809150509250925092565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600d908201526c34b73b30b634b2103a37b5b2b760991b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561312957613129613101565b500390565b600081600019048311821515161561314857613148613101565b500290565b60008261316a57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561318257613182613101565b500190565b60208082526017908201527f696e73756666696369656e7420636f6c6c61746572616c000000000000000000604082015260600190565b6000602082840312156131d057600080fd5b815160ff81168114612b7c57600080fd5b6000602082840312156131f357600080fd5b81518015158114612b7c57600080fd5b60006020828403121561321557600080fd5b8151612b7c81612ce4565b60006020828403121561323257600080fd5b5051919050565b600181815b8085111561327457816000190482111561325a5761325a613101565b8085161561326757918102915b93841c939080029061323e565b509250929050565b60008261328b57506001610ab3565b8161329857506000610ab3565b81600181146132ae57600281146132b8576132d4565b6001915050610ab3565b60ff8411156132c9576132c9613101565b50506001821b610ab3565b5060208310610133831016604e8410600b84101617156132f7575081810a610ab3565b6133018383613239565b806000190482111561331557613315613101565b029392505050565b6000612b7c60ff84168361327c565b634e487b7160e01b600052603260045260246000fd5b600060001982141561335657613356613101565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156133d95781810151838201526020016133c1565b838111156107595750506000910152565b600082516133fc8184602087016133be565b9190910192915050565b60208152600082518060208401526134258160408501602087016133be565b601f01601f1916919091016040019291505056fea2646970667358221220857b637a3daff5fc60e6480909ccf658c9174799c43ada7826cd75aa2161636b64736f6c63430008090033",
  "devdoc": {
    "details": "If the user's health factor is below 1, anyone can liquidate his/her position. Protocol will charge debt interest from borrowers and protocol revenue from liquidation.",
    "kind": "dev",
    "methods": {
      "accrue()": {
        "details": "Updates the contract's state by calculating the additional interest accrued since the last time"
      },
      "addCollateralToken(address,(uint128,uint128),(uint128,uint128),uint256)": {
        "details": "only owner can call this function",
        "params": {
          "_creditLimitRate": "borrow limit",
          "_liqLimitRate": "liquidation threshold rate",
          "_token": "collateral token address"
        }
      },
      "allCollateralTokens()": {
        "returns": {
          "_0": "The collateral tokens in array format"
        }
      },
      "borrow(address,uint256)": {
        "details": "user can call this function after depositing his/her collateral",
        "params": {
          "_airUSDAmount": "AirUSD amount to borrow",
          "_token": "collateral token address"
        }
      },
      "collectOrgFee()": {
        "details": "only owner can call this function"
      },
      "deposit(address,uint256,address)": {
        "details": "user can call this function after approving his/her collateral amount",
        "params": {
          "_amount": "collateral amount to deposit",
          "_onBehalfOf": "deposit collateral for",
          "_token": "collateral token address"
        }
      },
      "initialize(address,address,((uint128,uint128),(uint128,uint128),(uint128,uint128)))": {
        "params": {
          "_airUSD": "AirUSD token address",
          "_provider": "address provider",
          "_settings": "lending market settings"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "positionView(address,address)": {
        "returns": {
          "_0": "position this includes a user's collateral, debt, liquidation data."
        }
      },
      "removeCollateralToken(address)": {
        "details": "only owner can call this function",
        "params": {
          "_token": "collateral token address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(address,uint256)": {
        "details": "user can call this function after approving his/her AirUSD amount to repay",
        "params": {
          "_airUSDAmount": "AirUSD amount to repay",
          "_token": "collateral token address"
        }
      },
      "setAddressProvider(address)": {
        "params": {
          "_provider": "new address provider"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "details": "user can call this function after depositing his/her collateral",
        "params": {
          "_amount": "collateral amount to withdraw",
          "_token": "collateral token address"
        }
      }
    },
    "title": "LendingMarket",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Borrowed(address,uint256)": {
        "notice": "An event thats emitted when user borrows AirUSD"
      },
      "Deposit(address,address,uint256,uint256)": {
        "notice": "An event thats emitted when user deposits collateral"
      },
      "Liquidate(address,address,uint256,address)": {
        "notice": "An event thats emitted when liquidator liquidates a user's position"
      },
      "Repay(address,uint256)": {
        "notice": "An event thats emitted when user repays AirUSD"
      },
      "Withdraw(address,address,uint256,uint256)": {
        "notice": "An event thats emitted when user withdraws collateral"
      }
    },
    "kind": "user",
    "methods": {
      "accrue()": {
        "notice": "accrue debt interest"
      },
      "addCollateralToken(address,(uint128,uint128),(uint128,uint128),uint256)": {
        "notice": "add a new collateral token"
      },
      "addressProvider()": {
        "notice": "address provider"
      },
      "airUSD()": {
        "notice": "AirUSD token address"
      },
      "allCollateralTokens()": {
        "notice": "returns all collateral tokens in array format"
      },
      "borrow(address,uint256)": {
        "notice": "borrow AirUSD"
      },
      "collateralSettings(address)": {
        "notice": "collateral settings"
      },
      "collateralTokens(uint256)": {
        "notice": "collateral tokens in array"
      },
      "collectOrgFee()": {
        "notice": "collect protocol fees accrued so far"
      },
      "deposit(address,uint256,address)": {
        "notice": "deposit collateral"
      },
      "initialize(address,address,((uint128,uint128),(uint128,uint128),(uint128,uint128)))": {
        "notice": "Initializer."
      },
      "positionView(address,address)": {
        "notice": "returns a user's collateral position"
      },
      "removeCollateralToken(address)": {
        "notice": "remove an existing collateral token"
      },
      "repay(address,uint256)": {
        "notice": "repay position with AirUSD"
      },
      "setAddressProvider(address)": {
        "notice": "set new address provider"
      },
      "settings()": {
        "notice": "lending market settings"
      },
      "totalBorrowsPerCollateral(address)": {
        "notice": "airUSD total borrows per collateral token"
      },
      "totalDebtAccruedAt()": {
        "notice": "last time of debt accrued"
      },
      "totalDebtAmount()": {
        "notice": "total borrowed amount accrued so far"
      },
      "totalDebtPortion()": {
        "notice": "total borrowed portion"
      },
      "totalFeeCollected()": {
        "notice": "total protocol fees accrued so far"
      },
      "withdraw(address,uint256)": {
        "notice": "withdraw collateral"
      }
    },
    "notice": "Lending pools where users can deposit/withdraw collateral and borrow AirUSD.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 190,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 193,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 930,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 182,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 271,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 314,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5201,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "addressProvider",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(ILendingAddressRegistry)12178"
      },
      {
        "astId": 5205,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "airUSD",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IAirUSD)12038"
      },
      {
        "astId": 5209,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "settings",
        "offset": 0,
        "slot": "153",
        "type": "t_struct(MarketSettings)5130_storage"
      },
      {
        "astId": 5213,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "collateralTokens",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5219,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "collateralSettings",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_struct(CollateralSetting)5143_storage)"
      },
      {
        "astId": 5223,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "collateralTotalShares",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5231,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "userPositions",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Position)5150_storage))"
      },
      {
        "astId": 5236,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "totalBorrowsPerCollateral",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5242,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "marketUsers",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5249,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "isMarketUser",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5252,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "totalDebtAmount",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 5255,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "totalDebtAccruedAt",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 5258,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "totalDebtPortion",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 5261,
        "contract": "contracts/LendingMarket.sol:LendingMarket",
        "label": "totalFeeCollected",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAirUSD)12038": {
        "encoding": "inplace",
        "label": "contract IAirUSD",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingAddressRegistry)12178": {
        "encoding": "inplace",
        "label": "contract ILendingAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Position)5150_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LendingMarket.Position))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Position)5150_storage)"
      },
      "t_mapping(t_address,t_struct(CollateralSetting)5143_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LendingMarket.CollateralSetting)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralSetting)5143_storage"
      },
      "t_mapping(t_address,t_struct(Position)5150_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LendingMarket.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)5150_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CollateralSetting)5143_storage": {
        "encoding": "inplace",
        "label": "struct LendingMarket.CollateralSetting",
        "members": [
          {
            "astId": 5132,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "isValid",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5135,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "creditLimitRate",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Rate)5120_storage"
          },
          {
            "astId": 5138,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "liqLimitRate",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Rate)5120_storage"
          },
          {
            "astId": 5140,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "decimals",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 5142,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "totalBorrowCap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(MarketSettings)5130_storage": {
        "encoding": "inplace",
        "label": "struct LendingMarket.MarketSettings",
        "members": [
          {
            "astId": 5123,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "interestApr",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Rate)5120_storage"
          },
          {
            "astId": 5126,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "orgFeeRate",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Rate)5120_storage"
          },
          {
            "astId": 5129,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "liquidationPenalty",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Rate)5120_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Position)5150_storage": {
        "encoding": "inplace",
        "label": "struct LendingMarket.Position",
        "members": [
          {
            "astId": 5145,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5147,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "debtPrincipal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5149,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "debtPortion",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Rate)5120_storage": {
        "encoding": "inplace",
        "label": "struct LendingMarket.Rate",
        "members": [
          {
            "astId": 5117,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "numerator",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 5119,
            "contract": "contracts/LendingMarket.sol:LendingMarket",
            "label": "denominator",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}